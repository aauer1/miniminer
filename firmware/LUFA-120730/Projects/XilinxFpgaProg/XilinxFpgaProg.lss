
XilinxFpgaProg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  000015f4  00001688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080020e  0080020e  00001796  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000919  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002e49  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006f8  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b242  00000000  00000000  00003552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031f9  00000000  00000000  0000e794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000eddb  00000000  00000000  0001198d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001180  00000000  00000000  00020768  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00015e1a  00000000  00000000  000218e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071dc  00000000  00000000  00037702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000908  00000000  00000000  0003e8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00015e32  00000000  00000000  0003f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
}
      2a:	00 00       	nop

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
      2c:	06 c6       	rjmp	.+3084   	; 0xc3a <__vector_11>
	  return ErrorCode;

	if (BytesProcessed != NULL)
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
      2e:	00 00       	nop
	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
	{
		Length -= *BytesProcessed;
      30:	a8 c6       	rjmp	.+3408   	; 0xd82 <__vector_12>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
      32:	00 00       	nop
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
      3a:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
      3e:	00 00       	nop
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
      42:	00 00       	nop
		{
			Endpoint_ClearOUT();

			if (BytesProcessed != NULL)
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
      4a:	00 00       	nop
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
      4c:	0d c2       	rjmp	.+1050   	; 0x468 <__vector_19>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
      4e:	00 00       	nop
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
      52:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
      56:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      5a:	00 00       	nop
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
      5c:	a6 c0       	rjmp	.+332    	; 0x1aa <__vector_23>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      5e:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      62:	00 00       	nop

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
      66:	00 00       	nop
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
		}
		else
		{
			Endpoint_Discard_8();

			Length--;
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
			BytesInTransfer++;
      6e:	00 00       	nop
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      72:	00 00       	nop

00000074 <ProductString>:
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
      74:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      84:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      94:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000a4 <ManufacturerString>:
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      c2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      f2:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000100 <DeviceDescriptor>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     100:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
     110:	dc 01                                               ..

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d4 e0       	ldi	r29, 0x04	; 4
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
     11e:	12 e0       	ldi	r17, 0x02	; 2
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e4 ef       	ldi	r30, 0xF4	; 244
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     126:	f5 e1       	ldi	r31, 0x15	; 21
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	ae 30       	cpi	r26, 0x0E	; 14
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	ae e0       	ldi	r26, 0x0E	; 14
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a1 3b       	cpi	r26, 0xB1	; 177
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	8d d0       	rcall	.+282    	; 0x260 <main>
     146:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_exit>

0000014a <__bad_interrupt>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <LEDs_SetAllLEDs>:
     14c:	95 b1       	in	r25, 0x05	; 5
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14e:	9f 73       	andi	r25, 0x3F	; 63
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     150:	90 68       	ori	r25, 0x80	; 128
     152:	98 2b       	or	r25, r24
     154:	95 b9       	out	0x05, r25	; 5
     156:	08 95       	ret

00000158 <RingBuffer_Insert.constprop.1>:
     158:	ed e1       	ldi	r30, 0x1D	; 29
     15a:	f1 e0       	ldi	r31, 0x01	; 1
     15c:	a0 81       	ld	r26, Z
     15e:	b1 81       	ldd	r27, Z+1	; 0x01
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     160:	6c 93       	st	X, r22
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	91 83       	std	Z+1, r25	; 0x01
     16a:	80 83       	st	Z, r24
     16c:	26 81       	ldd	r18, Z+6	; 0x06
     16e:	37 81       	ldd	r19, Z+7	; 0x07
     170:	82 17       	cp	r24, r18
     172:	93 07       	cpc	r25, r19
     174:	21 f4       	brne	.+8      	; 0x17e <RingBuffer_Insert.constprop.1+0x26>
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     176:	84 81       	ldd	r24, Z+4	; 0x04
     178:	95 81       	ldd	r25, Z+5	; 0x05
     17a:	91 83       	std	Z+1, r25	; 0x01
     17c:	80 83       	st	Z, r24
     17e:	2f b7       	in	r18, 0x3f	; 63
     180:	f8 94       	cli
     182:	82 85       	ldd	r24, Z+10	; 0x0a
     184:	93 85       	ldd	r25, Z+11	; 0x0b
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	93 87       	std	Z+11, r25	; 0x0b
				ReportData     += 4;
     18a:	82 87       	std	Z+10, r24	; 0x0a
     18c:	2f bf       	out	0x3f, r18	; 63
     18e:	08 95       	ret

00000190 <debug>:
     190:	cf 93       	push	r28
     192:	c8 2f       	mov	r28, r24
     194:	8a 30       	cpi	r24, 0x0A	; 10
     196:	21 f4       	brne	.+8      	; 0x1a0 <debug+0x10>
     198:	6d e0       	ldi	r22, 0x0D	; 13
     19a:	8d e1       	ldi	r24, 0x1D	; 29
				break;
     19c:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     19e:	dc df       	rcall	.-72     	; 0x158 <RingBuffer_Insert.constprop.1>
     1a0:	6c 2f       	mov	r22, r28
     1a2:	8d e1       	ldi	r24, 0x1D	; 29
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	cf 91       	pop	r28
     1a8:	d7 cf       	rjmp	.-82     	; 0x158 <RingBuffer_Insert.constprop.1>

000001aa <__vector_23>:
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
     1b4:	2f 93       	push	r18
     1b6:	3f 93       	push	r19
     1b8:	4f 93       	push	r20
     1ba:	5f 93       	push	r21
     1bc:	6f 93       	push	r22
     1be:	7f 93       	push	r23
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	af 93       	push	r26
     1c6:	bf 93       	push	r27
     1c8:	ef 93       	push	r30
     1ca:	ff 93       	push	r31
     1cc:	60 91 ce 00 	lds	r22, 0x00CE
     1d0:	8e b3       	in	r24, 0x1e	; 30
     1d2:	84 30       	cpi	r24, 0x04	; 4
     1d4:	19 f4       	brne	.+6      	; 0x1dc <__vector_23+0x32>
				ReportSize     -= 2;
     1d6:	8b e1       	ldi	r24, 0x1B	; 27
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	b7 d2       	rcall	.+1390   	; 0x74a <appSerialDataReceived>
     1dc:	ff 91       	pop	r31
     1de:	ef 91       	pop	r30
     1e0:	bf 91       	pop	r27
     1e2:	af 91       	pop	r26
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	7f 91       	pop	r23
				ReportData     += 2;
     1ea:	6f 91       	pop	r22
     1ec:	5f 91       	pop	r21
     1ee:	4f 91       	pop	r20
     1f0:	3f 91       	pop	r19
     1f2:	2f 91       	pop	r18
				break;
     1f4:	0f 90       	pop	r0
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <SetupHardware>:
     1fe:	84 b7       	in	r24, 0x34	; 52
     200:	87 7f       	andi	r24, 0xF7	; 247
     202:	84 bf       	out	0x34, r24	; 52
     204:	88 e1       	ldi	r24, 0x18	; 24
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
				ReportSize     -= 1;
     20a:	80 93 60 00 	sts	0x0060, r24
     20e:	10 92 60 00 	sts	0x0060, r1
     212:	0f be       	out	0x3f, r0	; 63
     214:	87 e2       	ldi	r24, 0x27	; 39
     216:	84 b9       	out	0x04, r24	; 4
     218:	88 e3       	ldi	r24, 0x38	; 56
     21a:	85 b9       	out	0x05, r24	; 5
				ReportData     += 1;
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	87 b9       	out	0x07, r24	; 7
     220:	18 b8       	out	0x08, r1	; 8
     222:	88 e0       	ldi	r24, 0x08	; 8
     224:	8a b9       	out	0x0a, r24	; 10
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     226:	84 e4       	ldi	r24, 0x44	; 68
     228:	8b b9       	out	0x0b, r24	; 11
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	80 93 80 00 	sts	0x0080, r24
     230:	10 92 8b 00 	sts	0x008B, r1
     234:	10 92 8a 00 	sts	0x008A, r1
     238:	89 e0       	ldi	r24, 0x09	; 9
     23a:	80 93 81 00 	sts	0x0081, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	80 93 61 00 	sts	0x0061, r24
     24a:	90 93 61 00 	sts	0x0061, r25
     24e:	0f be       	out	0x3f, r0	; 63
     250:	30 d1       	rcall	.+608    	; 0x4b2 <clockInit>
     252:	84 b1       	in	r24, 0x04	; 4
     254:	80 6c       	ori	r24, 0xC0	; 192
     256:	84 b9       	out	0x04, r24	; 4
     258:	2e 98       	cbi	0x05, 6	; 5
     25a:	e0 d4       	rcall	.+2496   	; 0xc1c <USB_Init>
     25c:	f2 d2       	rcall	.+1508   	; 0x842 <serialInit>
     25e:	a2 c2       	rjmp	.+1348   	; 0x7a4 <xilinxInit>

00000260 <main>:
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	29 97       	sbiw	r28, 0x09	; 9
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	8e ef       	ldi	r24, 0xFE	; 254
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	90 93 ae 02 	sts	0x02AE, r25
     27c:	80 93 ad 02 	sts	0x02AD, r24
     280:	be df       	rcall	.-132    	; 0x1fe <SetupHardware>
     282:	8b e1       	ldi	r24, 0x1B	; 27
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	d5 d1       	rcall	.+938    	; 0x632 <appInit>
     288:	80 e4       	ldi	r24, 0x40	; 64
     28a:	60 df       	rcall	.-320    	; 0x14c <LEDs_SetAllLEDs>
     28c:	4a e0       	ldi	r20, 0x0A	; 10
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	8e 01       	movw	r16, r28
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	1f 4f       	sbci	r17, 0xFF	; 255
     29a:	c8 01       	movw	r24, r16
     29c:	47 d1       	rcall	.+654    	; 0x52c <timerSet>
     29e:	78 94       	sei
     2a0:	d0 2e       	mov	r13, r16
     2a2:	c1 2e       	mov	r12, r17
     2a4:	8d e1       	ldi	r24, 0x1D	; 29
     2a6:	e8 2e       	mov	r14, r24
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	f8 2e       	mov	r15, r24
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 c6 09 	call	0x138c	; 0x138c <CDC_Device_BytesReceived>
     2b4:	89 2b       	or	r24, r25
     2b6:	19 f0       	breq	.+6      	; 0x2be <main+0x5e>
     2b8:	8b e1       	ldi	r24, 0x1B	; 27
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	52 d2       	rcall	.+1188   	; 0x762 <appUsbDataReceived>
     2be:	8f b7       	in	r24, 0x3f	; 63
     2c0:	f8 94       	cli
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     2c2:	00 91 27 01 	lds	r16, 0x0127
     2c6:	10 91 28 01 	lds	r17, 0x0128
     2ca:	8f bf       	out	0x3f, r24	; 63
     2cc:	8d 2d       	mov	r24, r13
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     2ce:	9c 2d       	mov	r25, r12
     2d0:	55 d1       	rcall	.+682    	; 0x57c <timerExpired>
     2d2:	81 11       	cpse	r24, r1
     2d4:	0c c0       	rjmp	.+24     	; 0x2ee <main+0x8e>
     2d6:	01 15       	cp	r16, r1
     2d8:	11 05       	cpc	r17, r1
     2da:	49 f4       	brne	.+18     	; 0x2ee <main+0x8e>
     2dc:	8b e1       	ldi	r24, 0x1B	; 27
     2de:	91 e0       	ldi	r25, 0x01	; 1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2e0:	e0 d1       	rcall	.+960    	; 0x6a2 <appService>
				break;
     2e2:	80 e0       	ldi	r24, 0x00	; 0
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 b8 09 	call	0x1370	; 0x1370 <CDC_Device_USBTask>
     2ea:	b2 d7       	rcall	.+3940   	; 0x1250 <USB_USBTask>
     2ec:	df cf       	rjmp	.-66     	; 0x2ac <main+0x4c>
     2ee:	8d 2d       	mov	r24, r13
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2f0:	9c 2d       	mov	r25, r12
     2f2:	37 d1       	rcall	.+622    	; 0x562 <timerRestart>
     2f4:	25 c0       	rjmp	.+74     	; 0x340 <main+0xe0>
				break;
     2f6:	e0 91 1f 01 	lds	r30, 0x011F
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2fa:	f0 91 20 01 	lds	r31, 0x0120
     2fe:	60 81       	ld	r22, Z
     300:	80 e0       	ldi	r24, 0x00	; 0
				break;
     302:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     304:	e5 d7       	rcall	.+4042   	; 0x12d0 <CDC_Device_SendByte>
     306:	81 11       	cpse	r24, r1
     308:	e9 cf       	rjmp	.-46     	; 0x2dc <main+0x7c>
     30a:	f7 01       	movw	r30, r14
     30c:	22 81       	ldd	r18, Z+2	; 0x02
				break;
     30e:	33 81       	ldd	r19, Z+3	; 0x03
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	33 83       	std	Z+3, r19	; 0x03
     316:	22 83       	std	Z+2, r18	; 0x02
     318:	46 81       	ldd	r20, Z+6	; 0x06
     31a:	57 81       	ldd	r21, Z+7	; 0x07
     31c:	24 17       	cp	r18, r20
				break;
     31e:	35 07       	cpc	r19, r21
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     320:	21 f4       	brne	.+8      	; 0x32a <main+0xca>
     322:	24 81       	ldd	r18, Z+4	; 0x04
     324:	35 81       	ldd	r19, Z+5	; 0x05
     326:	33 83       	std	Z+3, r19	; 0x03
     328:	22 83       	std	Z+2, r18	; 0x02
				break;
     32a:	8f b7       	in	r24, 0x3f	; 63
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     32c:	f8 94       	cli
     32e:	22 85       	ldd	r18, Z+10	; 0x0a
     330:	33 85       	ldd	r19, Z+11	; 0x0b
     332:	21 50       	subi	r18, 0x01	; 1
     334:	31 09       	sbc	r19, r1
     336:	33 87       	std	Z+11, r19	; 0x0b
     338:	22 87       	std	Z+10, r18	; 0x0a
				break;
     33a:	8f bf       	out	0x3f, r24	; 63
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     33c:	01 50       	subi	r16, 0x01	; 1
     33e:	11 09       	sbc	r17, r1
				break;
     340:	01 15       	cp	r16, r1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     342:	11 05       	cpc	r17, r1
     344:	c1 f6       	brne	.-80     	; 0x2f6 <main+0x96>
     346:	ca cf       	rjmp	.-108    	; 0x2dc <main+0x7c>

00000348 <EVENT_USB_Device_Connect>:
     348:	80 ec       	ldi	r24, 0xC0	; 192
     34a:	00 cf       	rjmp	.-512    	; 0x14c <LEDs_SetAllLEDs>

0000034c <EVENT_USB_Device_Disconnect>:
     34c:	80 e4       	ldi	r24, 0x40	; 64
     34e:	fe ce       	rjmp	.-516    	; 0x14c <LEDs_SetAllLEDs>

00000350 <EVENT_USB_Device_ConfigurationChanged>:
				break;
     350:	80 e0       	ldi	r24, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	98 d7       	rcall	.+3888   	; 0x1286 <CDC_Device_ConfigureEndpoints>
				break;
     356:	88 23       	and	r24, r24
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     358:	11 f0       	breq	.+4      	; 0x35e <EVENT_USB_Device_ConfigurationChanged+0xe>
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	01 c0       	rjmp	.+2      	; 0x360 <EVENT_USB_Device_ConfigurationChanged+0x10>
				break;
     35e:	80 e4       	ldi	r24, 0x40	; 64
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     360:	f5 ce       	rjmp	.-534    	; 0x14c <LEDs_SetAllLEDs>

00000362 <EVENT_USB_Device_ControlRequest>:
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	91 e0       	ldi	r25, 0x01	; 1

				if (ParserData->UsingReportIDs)
     366:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <CDC_Device_ProcessControlRequest>

0000036a <EVENT_CDC_Device_LineEncodingChanged>:
     36a:	cf 93       	push	r28
     36c:	fc 01       	movw	r30, r24
     36e:	a1 8d       	ldd	r26, Z+25	; 0x19
     370:	a1 50       	subi	r26, 0x01	; 1
     372:	a2 30       	cpi	r26, 0x02	; 2
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     374:	28 f4       	brcc	.+10     	; 0x380 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	a4 5f       	subi	r26, 0xF4	; 244
     37a:	bd 4f       	sbci	r27, 0xFD	; 253
     37c:	cc 91       	ld	r28, X
     37e:	01 c0       	rjmp	.+2      	; 0x382 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     380:	c0 e0       	ldi	r28, 0x00	; 0
     382:	80 8d       	ldd	r24, Z+24	; 0x18
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     384:	82 30       	cpi	r24, 0x02	; 2

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     386:	09 f4       	brne	.+2      	; 0x38a <EVENT_CDC_Device_LineEncodingChanged+0x20>
     388:	c8 60       	ori	r28, 0x08	; 8
     38a:	82 8d       	ldd	r24, Z+26	; 0x1a
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     38c:	87 30       	cpi	r24, 0x07	; 7
     38e:	31 f0       	breq	.+12     	; 0x39c <EVENT_CDC_Device_LineEncodingChanged+0x32>
     390:	88 30       	cpi	r24, 0x08	; 8
     392:	31 f0       	breq	.+12     	; 0x3a0 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     394:	86 30       	cpi	r24, 0x06	; 6
     396:	29 f4       	brne	.+10     	; 0x3a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     398:	c2 60       	ori	r28, 0x02	; 2
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     39c:	c4 60       	ori	r28, 0x04	; 4
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     3a0:	c6 60       	ori	r28, 0x06	; 6
     3a2:	10 92 c9 00 	sts	0x00C9, r1
     3a6:	10 92 c8 00 	sts	0x00C8, r1
     3aa:	10 92 ca 00 	sts	0x00CA, r1
     3ae:	24 89       	ldd	r18, Z+20	; 0x14
     3b0:	35 89       	ldd	r19, Z+21	; 0x15
     3b2:	46 89       	ldd	r20, Z+22	; 0x16
     3b4:	57 89       	ldd	r21, Z+23	; 0x17

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     3b6:	ca 01       	movw	r24, r20
     3b8:	b9 01       	movw	r22, r18
     3ba:	96 95       	lsr	r25
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     3bc:	87 95       	ror	r24
     3be:	77 95       	ror	r23
     3c0:	67 95       	ror	r22
     3c2:	60 58       	subi	r22, 0x80	; 128
     3c4:	7b 47       	sbci	r23, 0x7B	; 123
     3c6:	81 4e       	sbci	r24, 0xE1	; 225
     3c8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ca:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivmodsi4>
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	31 09       	sbc	r19, r1
     3d2:	30 93 cd 00 	sts	0x00CD, r19
     3d6:	20 93 cc 00 	sts	0x00CC, r18
     3da:	c0 93 ca 00 	sts	0x00CA, r28
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 c8 00 	sts	0x00C8, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3e4:	88 e9       	ldi	r24, 0x98	; 152
     3e6:	80 93 c9 00 	sts	0x00C9, r24
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <CALLBACK_USB_GetDescriptor>:
     3ee:	29 2f       	mov	r18, r25
     3f0:	33 27       	eor	r19, r19
					}
				}

				ParserData->UsingReportIDs = true;
     3f2:	22 30       	cpi	r18, 0x02	; 2
     3f4:	31 05       	cpc	r19, r1
     3f6:	39 f0       	breq	.+14     	; 0x406 <CALLBACK_USB_GetDescriptor+0x18>
     3f8:	23 30       	cpi	r18, 0x03	; 3
     3fa:	31 05       	cpc	r19, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3fc:	49 f0       	breq	.+18     	; 0x410 <CALLBACK_USB_GetDescriptor+0x22>
     3fe:	21 30       	cpi	r18, 0x01	; 1
     400:	31 05       	cpc	r19, r1
     402:	21 f1       	breq	.+72     	; 0x44c <CALLBACK_USB_GetDescriptor+0x5e>
     404:	28 c0       	rjmp	.+80     	; 0x456 <CALLBACK_USB_GetDescriptor+0x68>
     406:	ee e3       	ldi	r30, 0x3E	; 62
     408:	f0 e0       	ldi	r31, 0x00	; 0
				break;
     40a:	82 ec       	ldi	r24, 0xC2	; 194
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	27 c0       	rjmp	.+78     	; 0x45e <CALLBACK_USB_GetDescriptor+0x70>
     410:	99 27       	eor	r25, r25
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	91 05       	cpc	r25, r1
     416:	61 f0       	breq	.+24     	; 0x430 <CALLBACK_USB_GetDescriptor+0x42>
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	91 05       	cpc	r25, r1
     41c:	81 f0       	breq	.+32     	; 0x43e <CALLBACK_USB_GetDescriptor+0x50>
     41e:	89 2b       	or	r24, r25
     420:	d1 f4       	brne	.+52     	; 0x456 <CALLBACK_USB_GetDescriptor+0x68>
     422:	ee eb       	ldi	r30, 0xBE	; 190
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e4 91       	lpm	r30, Z+
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	8e eb       	ldi	r24, 0xBE	; 190
				break;
     42c:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     42e:	17 c0       	rjmp	.+46     	; 0x45e <CALLBACK_USB_GetDescriptor+0x70>
     430:	e4 ea       	ldi	r30, 0xA4	; 164
     432:	f0 e0       	ldi	r31, 0x00	; 0
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     434:	e4 91       	lpm	r30, Z+
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	84 ea       	ldi	r24, 0xA4	; 164
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	10 c0       	rjmp	.+32     	; 0x45e <CALLBACK_USB_GetDescriptor+0x70>
     43e:	e4 e7       	ldi	r30, 0x74	; 116
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	e4 91       	lpm	r30, Z+
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	84 e7       	ldi	r24, 0x74	; 116
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	09 c0       	rjmp	.+18     	; 0x45e <CALLBACK_USB_GetDescriptor+0x70>
     44c:	e2 e1       	ldi	r30, 0x12	; 18
     44e:	f0 e0       	ldi	r31, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	04 c0       	rjmp	.+8      	; 0x45e <CALLBACK_USB_GetDescriptor+0x70>
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     45c:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     45e:	da 01       	movw	r26, r20
     460:	8d 93       	st	X+, r24
     462:	9c 93       	st	X, r25
     464:	cf 01       	movw	r24, r30
     466:	08 95       	ret

00000468 <__vector_19>:
     468:	1f 92       	push	r1
     46a:	0f 92       	push	r0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	0f 92       	push	r0
     470:	11 24       	eor	r1, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     472:	8f 93       	push	r24
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	80 91 0e 02 	lds	r24, 0x020E
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     47e:	90 91 0f 02 	lds	r25, 0x020F
     482:	a0 91 10 02 	lds	r26, 0x0210
     486:	b0 91 11 02 	lds	r27, 0x0211
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	a1 1d       	adc	r26, r1
     48e:	b1 1d       	adc	r27, r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     490:	80 93 0e 02 	sts	0x020E, r24
     494:	90 93 0f 02 	sts	0x020F, r25
     498:	a0 93 10 02 	sts	0x0210, r26
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     49c:	b0 93 11 02 	sts	0x0211, r27
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24

				if (UsageListSize)
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <clockInit>:
     4b2:	10 92 0e 02 	sts	0x020E, r1
     4b6:	10 92 0f 02 	sts	0x020F, r1
     4ba:	10 92 10 02 	sts	0x0210, r1
     4be:	10 92 11 02 	sts	0x0211, r1

					for (uint8_t i = 0; i < UsageListSize; i++)
     4c2:	ee e6       	ldi	r30, 0x6E	; 110
					  UsageList[i] = UsageList[i + 1];
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	82 60       	ori	r24, 0x02	; 2
     4ca:	80 83       	st	Z, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     4cc:	89 ef       	ldi	r24, 0xF9	; 249
     4ce:	87 bd       	out	0x27, r24	; 39
     4d0:	82 e0       	ldi	r24, 0x02	; 2
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     4d2:	84 bd       	out	0x24, r24	; 36
     4d4:	83 e0       	ldi	r24, 0x03	; 3
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4d6:	85 bd       	out	0x25, r24	; 37
     4d8:	08 95       	ret

000004da <clockGetTime>:
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <clockGetTime+0xa>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <clockGetTime+0xc>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	19 82       	std	Y+1, r1	; 0x01
     4ec:	1a 82       	std	Y+2, r1	; 0x02
     4ee:	1b 82       	std	Y+3, r1	; 0x03
     4f0:	1c 82       	std	Y+4, r1	; 0x04
     4f2:	f8 94       	cli
     4f4:	80 91 0e 02 	lds	r24, 0x020E
     4f8:	90 91 0f 02 	lds	r25, 0x020F
     4fc:	a0 91 10 02 	lds	r26, 0x0210
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     500:	b0 91 11 02 	lds	r27, 0x0211
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
     508:	ab 83       	std	Y+3, r26	; 0x03
     50a:	bc 83       	std	Y+4, r27	; 0x04
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     50c:	78 94       	sei
     50e:	09 81       	ldd	r16, Y+1	; 0x01
     510:	1a 81       	ldd	r17, Y+2	; 0x02
     512:	2b 81       	ldd	r18, Y+3	; 0x03
     514:	3c 81       	ldd	r19, Y+4	; 0x04
     516:	b8 01       	movw	r22, r16
				break;
     518:	c9 01       	movw	r24, r18
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <timerSet>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
					NewReportItem.CollectionPath = CurrCollectionPath;
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
     53a:	6a 01       	movw	r12, r20
     53c:	7b 01       	movw	r14, r22
     53e:	81 e0       	ldi	r24, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     540:	88 83       	st	Y, r24
     542:	cb df       	rcall	.-106    	; 0x4da <clockGetTime>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02

					if (UsageListSize)
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     54c:	cd 82       	std	Y+5, r12	; 0x05
     54e:	de 82       	std	Y+6, r13	; 0x06
     550:	ef 82       	std	Y+7, r14	; 0x07
     552:	f8 86       	std	Y+8, r15	; 0x08
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	08 95       	ret

00000562 <timerRestart>:

						for (uint8_t i = 0; i < UsageListSize; i++)
     562:	cf 93       	push	r28
						  UsageList[i] = UsageList[i + 1];
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	88 83       	st	Y, r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     56c:	b6 df       	rcall	.-148    	; 0x4da <clockGetTime>
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	7a 83       	std	Y+2, r23	; 0x02
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	9c 83       	std	Y+4, r25	; 0x04
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <timerExpired>:
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     596:	a1 df       	rcall	.-190    	; 0x4da <clockGetTime>
     598:	28 81       	ld	r18, Y
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     59a:	22 23       	and	r18, r18
     59c:	09 f1       	breq	.+66     	; 0x5e0 <timerExpired+0x64>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     59e:	09 81       	ldd	r16, Y+1	; 0x01
     5a0:	1a 81       	ldd	r17, Y+2	; 0x02
     5a2:	2b 81       	ldd	r18, Y+3	; 0x03
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     5a4:	3c 81       	ldd	r19, Y+4	; 0x04
     5a6:	cd 80       	ldd	r12, Y+5	; 0x05

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     5a8:	de 80       	ldd	r13, Y+6	; 0x06
     5aa:	ef 80       	ldd	r14, Y+7	; 0x07
     5ac:	f8 84       	ldd	r15, Y+8	; 0x08
     5ae:	4b 01       	movw	r8, r22
     5b0:	5c 01       	movw	r10, r24
     5b2:	80 1a       	sub	r8, r16
     5b4:	91 0a       	sbc	r9, r17
     5b6:	a2 0a       	sbc	r10, r18
     5b8:	b3 0a       	sbc	r11, r19
     5ba:	06 17       	cp	r16, r22
     5bc:	17 07       	cpc	r17, r23
     5be:	28 07       	cpc	r18, r24
     5c0:	39 07       	cpc	r19, r25
     5c2:	30 f4       	brcc	.+12     	; 0x5d0 <timerExpired+0x54>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5c4:	c8 14       	cp	r12, r8
     5c6:	d9 04       	cpc	r13, r9
     5c8:	ea 04       	cpc	r14, r10
     5ca:	fb 04       	cpc	r15, r11
     5cc:	48 f4       	brcc	.+18     	; 0x5e0 <timerExpired+0x64>
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <timerExpired+0x5e>
     5d0:	8c 14       	cp	r8, r12
     5d2:	9d 04       	cpc	r9, r13

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5d4:	ae 04       	cpc	r10, r14
     5d6:	bf 04       	cpc	r11, r15
     5d8:	18 f0       	brcs	.+6      	; 0x5e0 <timerExpired+0x64>
     5da:	18 82       	st	Y, r1
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <timerExpired+0x66>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	08 95       	ret

000005fc <RingBuffer_Insert>:
     5fc:	fc 01       	movw	r30, r24
     5fe:	a0 81       	ld	r26, Z
     600:	b1 81       	ldd	r27, Z+1	; 0x01
     602:	6c 93       	st	X, r22
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	91 83       	std	Z+1, r25	; 0x01

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     60c:	80 83       	st	Z, r24
     60e:	26 81       	ldd	r18, Z+6	; 0x06
     610:	37 81       	ldd	r19, Z+7	; 0x07
     612:	82 17       	cp	r24, r18
					  return HID_PARSE_InsufficientReportItems;
     614:	93 07       	cpc	r25, r19
     616:	21 f4       	brne	.+8      	; 0x620 <RingBuffer_Insert+0x24>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	91 83       	std	Z+1, r25	; 0x01
     61e:	80 83       	st	Z, r24
     620:	2f b7       	in	r18, 0x3f	; 63
     622:	f8 94       	cli
     624:	82 85       	ldd	r24, Z+10	; 0x0a
     626:	93 85       	ldd	r25, Z+11	; 0x0b
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	93 87       	std	Z+11, r25	; 0x0b
     62c:	82 87       	std	Z+10, r24	; 0x0a
     62e:	2f bf       	out	0x3f, r18	; 63
     630:	08 95       	ret

00000632 <appInit>:
     632:	9c 01       	movw	r18, r24
     634:	22 5f       	subi	r18, 0xF2	; 242
     636:	3f 4f       	sbci	r19, 0xFF	; 255
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     638:	fc 01       	movw	r30, r24
     63a:	32 96       	adiw	r30, 0x02	; 2
     63c:	4f b7       	in	r20, 0x3f	; 63
     63e:	f8 94       	cli
     640:	31 83       	std	Z+1, r19	; 0x01
     642:	20 83       	st	Z, r18
     644:	33 83       	std	Z+3, r19	; 0x03
     646:	22 83       	std	Z+2, r18	; 0x02
     648:	35 83       	std	Z+5, r19	; 0x05
     64a:	24 83       	std	Z+4, r18	; 0x04
     64c:	dc 01       	movw	r26, r24
     64e:	a2 57       	subi	r26, 0x72	; 114
     650:	bf 4f       	sbci	r27, 0xFF	; 255
     652:	b7 83       	std	Z+7, r27	; 0x07
     654:	a6 83       	std	Z+6, r26	; 0x06
     656:	20 e8       	ldi	r18, 0x80	; 128
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	31 87       	std	Z+9, r19	; 0x09
     65c:	20 87       	std	Z+8, r18	; 0x08
     65e:	13 86       	std	Z+11, r1	; 0x0b
     660:	12 86       	std	Z+10, r1	; 0x0a
     662:	4f bf       	out	0x3f, r20	; 63
     664:	9c 01       	movw	r18, r24
     666:	2d 55       	subi	r18, 0x5D	; 93
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	fc 01       	movw	r30, r24
     66c:	e9 56       	subi	r30, 0x69	; 105
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	4f b7       	in	r20, 0x3f	; 63
     672:	f8 94       	cli
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
     67c:	35 83       	std	Z+5, r19	; 0x05
     67e:	24 83       	std	Z+4, r18	; 0x04
     680:	8d 51       	subi	r24, 0x1D	; 29
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	97 83       	std	Z+7, r25	; 0x07
     686:	86 83       	std	Z+6, r24	; 0x06
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	91 87       	std	Z+9, r25	; 0x09
     68e:	80 87       	std	Z+8, r24	; 0x08
     690:	13 86       	std	Z+11, r1	; 0x0b
     692:	12 86       	std	Z+10, r1	; 0x0a
     694:	4f bf       	out	0x3f, r20	; 63
     696:	44 ef       	ldi	r20, 0xF4	; 244
					  ParserData->TotalReportItems++;
     698:	51 e0       	ldi	r21, 0x01	; 1
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	cd 01       	movw	r24, r26
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6a0:	45 cf       	rjmp	.-374    	; 0x52c <timerSet>

000006a2 <appService>:
     6a2:	cf 92       	push	r12
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6a4:	df 92       	push	r13
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	8c 01       	movw	r16, r24
     6b6:	02 57       	subi	r16, 0x72	; 114
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	c8 01       	movw	r24, r16
     6bc:	5f df       	rcall	.-322    	; 0x57c <timerExpired>
     6be:	88 23       	and	r24, r24
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <appService+0x22>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6c2:	3a c0       	rjmp	.+116    	; 0x738 <appService+0x96>
     6c4:	8f b7       	in	r24, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	7e 01       	movw	r14, r28
     6ca:	97 e9       	ldi	r25, 0x97	; 151
     6cc:	e9 0e       	add	r14, r25
     6ce:	f1 1c       	adc	r15, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6d0:	f7 01       	movw	r30, r14
     6d2:	d2 84       	ldd	r13, Z+10	; 0x0a
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6d4:	8f bf       	out	0x3f, r24	; 63
     6d6:	d1 10       	cpse	r13, r1
     6d8:	0a c0       	rjmp	.+20     	; 0x6ee <appService+0x4c>
     6da:	c8 01       	movw	r24, r16
     6dc:	df 91       	pop	r29
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6ea:	cf 90       	pop	r12
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6ec:	3a cf       	rjmp	.-396    	; 0x562 <timerRestart>
     6ee:	22 96       	adiw	r28, 0x02	; 2
     6f0:	65 e0       	ldi	r22, 0x05	; 5
     6f2:	ce 01       	movw	r24, r28
     6f4:	83 df       	rcall	.-250    	; 0x5fc <RingBuffer_Insert>
     6f6:	6d 2d       	mov	r22, r13
     6f8:	ce 01       	movw	r24, r28
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6fa:	80 df       	rcall	.-256    	; 0x5fc <RingBuffer_Insert>
     6fc:	c1 2c       	mov	r12, r1
     6fe:	f7 01       	movw	r30, r14
     700:	a2 81       	ldd	r26, Z+2	; 0x02
	  return HID_PARSE_NoUnfilteredReportItems;
     702:	b3 81       	ldd	r27, Z+3	; 0x03
     704:	6d 91       	ld	r22, X+

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     706:	b3 83       	std	Z+3, r27	; 0x03
     708:	a2 83       	std	Z+2, r26	; 0x02

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     70a:	86 81       	ldd	r24, Z+6	; 0x06
     70c:	97 81       	ldd	r25, Z+7	; 0x07

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     70e:	a8 17       	cp	r26, r24
     710:	b9 07       	cpc	r27, r25
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     712:	21 f4       	brne	.+8      	; 0x71c <appService+0x7a>
     714:	84 81       	ldd	r24, Z+4	; 0x04
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     716:	95 81       	ldd	r25, Z+5	; 0x05
     718:	93 83       	std	Z+3, r25	; 0x03
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     71a:	82 83       	std	Z+2, r24	; 0x02
     71c:	2f b7       	in	r18, 0x3f	; 63
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     71e:	f8 94       	cli
     720:	82 85       	ldd	r24, Z+10	; 0x0a
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     722:	93 85       	ldd	r25, Z+11	; 0x0b
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	93 87       	std	Z+11, r25	; 0x0b
     728:	82 87       	std	Z+10, r24	; 0x0a

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     72a:	2f bf       	out	0x3f, r18	; 63
     72c:	ce 01       	movw	r24, r28
     72e:	66 df       	rcall	.-308    	; 0x5fc <RingBuffer_Insert>
     730:	c3 94       	inc	r12
     732:	cd 14       	cp	r12, r13
     734:	20 f3       	brcs	.-56     	; 0x6fe <appService+0x5c>
     736:	d1 cf       	rjmp	.-94     	; 0x6da <appService+0x38>
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	08 95       	ret

0000074a <appSerialDataReceived>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ec 01       	movw	r28, r24
     750:	89 56       	subi	r24, 0x69	; 105
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	53 df       	rcall	.-346    	; 0x5fc <RingBuffer_Insert>
     756:	ce 01       	movw	r24, r28
     758:	82 57       	subi	r24, 0x72	; 114
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	df 91       	pop	r29
//------------------------------------------------------------------------------
void appSerialDataReceived(Application *app, uint8_t data)
{
    RingBuffer_Insert(&app->serial_rx_buffer, data);
    timerRestart(&app->serial_timeout);
}
     75e:	cf 91       	pop	r28
     760:	00 cf       	rjmp	.-512    	; 0x562 <timerRestart>

00000762 <appUsbDataReceived>:

//------------------------------------------------------------------------------
void appSerialDataReceived(Application *app, uint8_t data)
{
    RingBuffer_Insert(&app->serial_rx_buffer, data);
    timerRestart(&app->serial_timeout);
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	8c 01       	movw	r16, r24
     76c:	ec 01       	movw	r28, r24
     76e:	22 96       	adiw	r28, 0x02	; 2

//------------------------------------------------------------------------------
void appUsbDataReceived(Application *app)
{
    int16_t received_byte = 0;
    while((received_byte = CDC_Device_ReceiveByte(app->cdc_info)) >= 0)
     770:	0e c0       	rjmp	.+28     	; 0x78e <appUsbDataReceived+0x2c>
    {
        if(serialAddByte(received_byte))
     772:	81 d0       	rcall	.+258    	; 0x876 <serialAddByte>
     774:	88 23       	and	r24, r24
     776:	59 f0       	breq	.+22     	; 0x78e <appUsbDataReceived+0x2c>
     778:	bf d0       	rcall	.+382    	; 0x8f8 <serialProcess>
        {
            if(serialProcess())
     77a:	88 23       	and	r24, r24
     77c:	11 f0       	breq	.+4      	; 0x782 <appUsbDataReceived+0x20>
     77e:	60 e8       	ldi	r22, 0x80	; 128
     780:	01 c0       	rjmp	.+2      	; 0x784 <appUsbDataReceived+0x22>
            {
                RingBuffer_Insert(&app->USARTtoUSB_Buffer, SERIAL_ACK);
     782:	61 e8       	ldi	r22, 0x81	; 129
     784:	ce 01       	movw	r24, r28
            }
            else
            {
                RingBuffer_Insert(&app->USARTtoUSB_Buffer, SERIAL_NAK);
     786:	3a df       	rcall	.-396    	; 0x5fc <RingBuffer_Insert>
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	ce 01       	movw	r24, r28
     78c:	37 df       	rcall	.-402    	; 0x5fc <RingBuffer_Insert>
            }
            RingBuffer_Insert(&app->USARTtoUSB_Buffer, 0);
     78e:	f8 01       	movw	r30, r16
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	21 d6       	rcall	.+3138   	; 0x13d8 <CDC_Device_ReceiveByte>

//------------------------------------------------------------------------------
void appUsbDataReceived(Application *app)
{
    int16_t received_byte = 0;
    while((received_byte = CDC_Device_ReceiveByte(app->cdc_info)) >= 0)
     796:	97 ff       	sbrs	r25, 7
     798:	ec cf       	rjmp	.-40     	; 0x772 <appUsbDataReceived+0x10>
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <xilinxInit>:
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     7a4:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     7a6:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     7a8:	84 b1       	in	r24, 0x04	; 4
     7aa:	86 60       	ori	r24, 0x06	; 6
     7ac:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     7ae:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     7b0:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     7b2:	8d b5       	in	r24, 0x2d	; 45
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     7b8:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     7ba:	81 e5       	ldi	r24, 0x51	; 81
     7bc:	8c bd       	out	0x2c, r24	; 44
    SPI_Init(SPI_SPEED_FCPU_DIV_8  |
             SPI_SCK_LEAD_RISING   |
             SPI_SAMPLE_LEADING    |
             SPI_ORDER_MSB_FIRST   |
             SPI_MODE_MASTER);
    DDRB  |= (1 << 0);
     7be:	20 9a       	sbi	0x04, 0	; 4
    PORTB |= (1 << 0);
     7c0:	28 9a       	sbi	0x05, 0	; 5
     7c2:	08 95       	ret

000007c4 <xilinxSetupConfiguration>:
uint8_t xilinxSetupConfiguration()
{
    uint8_t ret = true;
    uint16_t timeout = 1000;

    clearProgramB();
     7c4:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c6:	8a e1       	ldi	r24, 0x1A	; 26
     7c8:	8a 95       	dec	r24
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <xilinxSetupConfiguration+0x4>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <xilinxSetupConfiguration+0xa>
    _delay_us(5);
    setProgramB();
     7ce:	2d 9a       	sbi	0x05, 5	; 5
     7d0:	9a e1       	ldi	r25, 0x1A	; 26
     7d2:	9a 95       	dec	r25
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <xilinxSetupConfiguration+0xe>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <xilinxSetupConfiguration+0x14>

//------------------------------------------------------------------------------
uint8_t xilinxSetupConfiguration()
{
    uint8_t ret = true;
    uint16_t timeout = 1000;
     7d8:	28 ee       	ldi	r18, 0xE8	; 232
     7da:	33 e0       	ldi	r19, 0x03	; 3
     7dc:	08 c0       	rjmp	.+16     	; 0x7ee <xilinxSetupConfiguration+0x2a>
    _delay_us(5);
    setProgramB();
    _delay_us(5);
    while(!isSetInitB() && timeout)
    {
        timeout--;
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	31 09       	sbc	r19, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e2:	8f e9       	ldi	r24, 0x9F	; 159
     7e4:	9f e0       	ldi	r25, 0x0F	; 15
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <xilinxSetupConfiguration+0x22>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <xilinxSetupConfiguration+0x28>
     7ec:	00 00       	nop

    clearProgramB();
    _delay_us(5);
    setProgramB();
    _delay_us(5);
    while(!isSetInitB() && timeout)
     7ee:	1c 99       	sbic	0x03, 4	; 3
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <xilinxSetupConfiguration+0x36>
     7f2:	21 15       	cp	r18, r1
     7f4:	31 05       	cpc	r19, r1
     7f6:	99 f7       	brne	.-26     	; 0x7de <xilinxSetupConfiguration+0x1a>
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <xilinxSetupConfiguration+0x3c>
    {
        timeout--;
        _delay_ms(1);
    }

    if(timeout == 0)
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	23 2b       	or	r18, r19
     7fe:	09 f4       	brne	.+2      	; 0x802 <xilinxSetupConfiguration+0x3e>
     800:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = false;
    }

    return ret;
}
     802:	08 95       	ret

00000804 <xilinxSend>:
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     804:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <xilinxSend+0x2>

//------------------------------------------------------------------------------
void xilinxSend(uint8_t buffer)
{
    SPI_SendByte(buffer);
}
     80c:	08 95       	ret

0000080e <RingBuffer_Remove.constprop.1>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     80e:	e2 e1       	ldi	r30, 0x12	; 18
     810:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     812:	a2 81       	ldd	r26, Z+2	; 0x02
     814:	b3 81       	ldd	r27, Z+3	; 0x03
     816:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     818:	b3 83       	std	Z+3, r27	; 0x03
     81a:	a2 83       	std	Z+2, r26	; 0x02
     81c:	26 81       	ldd	r18, Z+6	; 0x06
     81e:	37 81       	ldd	r19, Z+7	; 0x07
     820:	a2 17       	cp	r26, r18
     822:	b3 07       	cpc	r27, r19
     824:	21 f4       	brne	.+8      	; 0x82e <RingBuffer_Remove.constprop.1+0x20>
			  Buffer->Out = Buffer->Start;
     826:	24 81       	ldd	r18, Z+4	; 0x04
     828:	35 81       	ldd	r19, Z+5	; 0x05
     82a:	33 83       	std	Z+3, r19	; 0x03
     82c:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     82e:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     830:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     832:	22 85       	ldd	r18, Z+10	; 0x0a
     834:	33 85       	ldd	r19, Z+11	; 0x0b
     836:	21 50       	subi	r18, 0x01	; 1
     838:	31 09       	sbc	r19, r1
     83a:	33 87       	std	Z+11, r19	; 0x0b
     83c:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     83e:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     840:	08 95       	ret

00000842 <serialInit>:
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     842:	e2 e1       	ldi	r30, 0x12	; 18
     844:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     846:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     848:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     84a:	8e e1       	ldi	r24, 0x1E	; 30
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     852:	93 83       	std	Z+3, r25	; 0x03
     854:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     856:	95 83       	std	Z+5, r25	; 0x05
     858:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     85a:	8e e9       	ldi	r24, 0x9E	; 158
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	97 83       	std	Z+7, r25	; 0x07
     860:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	91 87       	std	Z+9, r25	; 0x09
     868:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     86a:	13 86       	std	Z+11, r1	; 0x0b
     86c:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     86e:	2f bf       	out	0x3f, r18	; 63

//------------------------------------------------------------------------------
void serialInit(void)
{
    RingBuffer_InitBuffer(&buffer_, buffer_data_, sizeof(buffer_data_));
    frame_size_ = 0;
     870:	10 92 9e 02 	sts	0x029E, r1
     874:	08 95       	ret

00000876 <serialAddByte>:
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     876:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     878:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     87a:	20 91 1c 02 	lds	r18, 0x021C
     87e:	30 91 1d 02 	lds	r19, 0x021D
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     882:	9f bf       	out	0x3f, r25	; 63
{
    uint16_t size;

    size = RingBuffer_GetCount(&buffer_);

    if(size == 0)
     884:	21 15       	cp	r18, r1
     886:	31 05       	cpc	r19, r1
     888:	21 f4       	brne	.+8      	; 0x892 <serialAddByte+0x1c>
    {
        if(byte >= SERIAL_END_COMMANDS)
     88a:	8a 30       	cpi	r24, 0x0A	; 10
     88c:	48 f0       	brcs	.+18     	; 0x8a0 <serialAddByte+0x2a>
        {
            return false;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
        }
    }
    else if(size == 1)
     892:	21 30       	cpi	r18, 0x01	; 1
     894:	31 05       	cpc	r19, r1
     896:	21 f4       	brne	.+8      	; 0x8a0 <serialAddByte+0x2a>
    {
        frame_size_ = byte+2;
     898:	98 2f       	mov	r25, r24
     89a:	9e 5f       	subi	r25, 0xFE	; 254
     89c:	90 93 9e 02 	sts	0x029E, r25
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     8a0:	e2 e1       	ldi	r30, 0x12	; 18
     8a2:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     8a4:	a0 81       	ld	r26, Z
     8a6:	b1 81       	ldd	r27, Z+1	; 0x01
     8a8:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
     8b4:	26 81       	ldd	r18, Z+6	; 0x06
     8b6:	37 81       	ldd	r19, Z+7	; 0x07
     8b8:	82 17       	cp	r24, r18
     8ba:	93 07       	cpc	r25, r19
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <serialAddByte+0x50>
			  Buffer->In = Buffer->Start;
     8be:	84 81       	ldd	r24, Z+4	; 0x04
     8c0:	95 81       	ldd	r25, Z+5	; 0x05
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8c6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8c8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     8ca:	82 85       	ldd	r24, Z+10	; 0x0a
     8cc:	93 85       	ldd	r25, Z+11	; 0x0b
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	93 87       	std	Z+11, r25	; 0x0b
     8d2:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8d4:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8d6:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8d8:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     8da:	20 91 1c 02 	lds	r18, 0x021C
     8de:	30 91 1d 02 	lds	r19, 0x021D
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8e2:	8f bf       	out	0x3f, r24	; 63
    }

    RingBuffer_Insert(&buffer_, byte);
    size = RingBuffer_GetCount(&buffer_);

    if(size == frame_size_)
     8e4:	80 91 9e 02 	lds	r24, 0x029E
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	28 17       	cp	r18, r24
     8ec:	39 07       	cpc	r19, r25
     8ee:	79 f6       	brne	.-98     	; 0x88e <serialAddByte+0x18>
    {
        frame_size_ = 0;
     8f0:	10 92 9e 02 	sts	0x029E, r1
        return true;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
    }

    return false;
}
     8f6:	08 95       	ret

000008f8 <serialProcess>:

//------------------------------------------------------------------------------
uint8_t serialProcess(void)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
    uint8_t cmd = RingBuffer_Remove(&buffer_);
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	86 df       	rcall	.-244    	; 0x80e <RingBuffer_Remove.constprop.1>
     902:	c8 2f       	mov	r28, r24
     904:	82 e1       	ldi	r24, 0x12	; 18
    uint8_t size = RingBuffer_Remove(&buffer_);
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	82 df       	rcall	.-252    	; 0x80e <RingBuffer_Remove.constprop.1>
     90a:	d8 2f       	mov	r29, r24
     90c:	c1 30       	cpi	r28, 0x01	; 1
     90e:	19 f4       	brne	.+6      	; 0x916 <serialProcess+0x1e>

    if(cmd == SERIAL_START_CONFIG)
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
            RingBuffer_Remove(&buffer_);
        return false;
    }

    return true;
}
     914:	57 cf       	rjmp	.-338    	; 0x7c4 <xilinxSetupConfiguration>
     916:	c2 30       	cpi	r28, 0x02	; 2
    uint8_t cmd = RingBuffer_Remove(&buffer_);
    uint8_t size = RingBuffer_Remove(&buffer_);

    if(cmd == SERIAL_START_CONFIG)
    {
        return xilinxSetupConfiguration();
     918:	99 f4       	brne	.+38     	; 0x940 <serialProcess+0x48>
     91a:	85 b1       	in	r24, 0x05	; 5
    }
    else if(cmd == SERIAL_DOWNLOAD_DATA)
     91c:	90 e4       	ldi	r25, 0x40	; 64
     91e:	89 27       	eor	r24, r25
        PORTB = ((PORTB & ~LEDMask) | ActiveMask);
    }

    static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
    {
        PORTB ^= LEDMask;
     920:	85 b9       	out	0x05, r24	; 5
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	05 c0       	rjmp	.+10     	; 0x930 <serialProcess+0x38>
     926:	82 e1       	ldi	r24, 0x12	; 18
    {
        uint8_t i=0;
        LEDs_ToggleLEDs(LEDS_LED1);
        for(i=0; i<size; i++)
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	71 df       	rcall	.-286    	; 0x80e <RingBuffer_Remove.constprop.1>
        {
            xilinxSend(RingBuffer_Remove(&buffer_));
     92c:	6b df       	rcall	.-298    	; 0x804 <xilinxSend>
     92e:	cf 5f       	subi	r28, 0xFF	; 255
     930:	cd 13       	cpse	r28, r29
     932:	f9 cf       	rjmp	.-14     	; 0x926 <serialProcess+0x2e>
     934:	4e 99       	sbic	0x09, 6	; 9
     936:	43 c0       	rjmp	.+134    	; 0x9be <serialProcess+0xc6>
    }
    else if(cmd == SERIAL_DOWNLOAD_DATA)
    {
        uint8_t i=0;
        LEDs_ToggleLEDs(LEDS_LED1);
        for(i=0; i<size; i++)
     938:	83 b1       	in	r24, 0x03	; 3
     93a:	82 95       	swap	r24
     93c:	81 70       	andi	r24, 0x01	; 1
        {
            xilinxSend(RingBuffer_Remove(&buffer_));
        }
        
        if(isSetDone())
     93e:	6e c0       	rjmp	.+220    	; 0xa1c <serialProcess+0x124>
     940:	c7 30       	cpi	r28, 0x07	; 7
        {
            return true;
        }
        
        if(!isSetInitB())
     942:	81 f4       	brne	.+32     	; 0x964 <serialProcess+0x6c>
     944:	20 9a       	sbi	0x04, 0	; 4
     946:	28 9a       	sbi	0x05, 0	; 5
     948:	84 b1       	in	r24, 0x04	; 4
        {
            return false;
        }
    }
    else if(cmd == SERIAL_USE_SPI)
     94a:	86 60       	ori	r24, 0x06	; 6
     94c:	84 b9       	out	0x04, r24	; 4
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     94e:	23 98       	cbi	0x04, 3	; 4
				PORTB |= (1 << 0);
     950:	2b 9a       	sbi	0x05, 3	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     952:	8d b5       	in	r24, 0x2d	; 45
     954:	81 60       	ori	r24, 0x01	; 1
     956:	8d bd       	out	0x2d, r24	; 45
				DDRB  &= ~(1 << 3);
     958:	20 98       	cbi	0x04, 0	; 4
				PORTB |=  (1 << 3);
     95a:	81 e5       	ldi	r24, 0x51	; 81

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     95c:	8c bd       	out	0x2c, r24	; 44
     95e:	20 9a       	sbi	0x04, 0	; 4
     960:	28 9a       	sbi	0x05, 0	; 5
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     962:	2d c0       	rjmp	.+90     	; 0x9be <serialProcess+0xc6>

				SPCR  = ((1 << SPE) | SPIOptions);
     964:	c3 30       	cpi	r28, 0x03	; 3
     966:	81 f4       	brne	.+32     	; 0x988 <serialProcess+0x90>
        SPI_Init(SPI_SPEED_FCPU_DIV_8  |
                 SPI_SCK_LEAD_RISING   |
                 SPI_SAMPLE_LEADING    |
                 SPI_ORDER_MSB_FIRST   |
                 SPI_MODE_MASTER);
        DDRB  |= (1 << 0);
     968:	85 b1       	in	r24, 0x05	; 5
        PORTB |= (1 << 0);
     96a:	80 58       	subi	r24, 0x80	; 128
     96c:	85 b9       	out	0x05, r24	; 5
    }
    else if(cmd == SERIAL_SPI_DATA)
     96e:	c0 e0       	ldi	r28, 0x00	; 0
     970:	08 c0       	rjmp	.+16     	; 0x982 <serialProcess+0x8a>
     972:	82 e1       	ldi	r24, 0x12	; 18
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	4b df       	rcall	.-362    	; 0x80e <RingBuffer_Remove.constprop.1>
    {
        uint8_t i=0;
        LEDs_ToggleLEDs(LEDS_LED2);
        for(i=0; i<size; i++)
     978:	8e bd       	out	0x2e, r24	; 46
     97a:	0d b4       	in	r0, 0x2d	; 45
        {
            SPI_SendByte(RingBuffer_Remove(&buffer_));
     97c:	07 fe       	sbrs	r0, 7
     97e:	fd cf       	rjmp	.-6      	; 0x97a <serialProcess+0x82>
     980:	cf 5f       	subi	r28, 0xFF	; 255
     982:	cd 13       	cpse	r28, r29
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     984:	f6 cf       	rjmp	.-20     	; 0x972 <serialProcess+0x7a>
				while (!(SPSR & (1 << SPIF)));
     986:	1b c0       	rjmp	.+54     	; 0x9be <serialProcess+0xc6>
     988:	c4 30       	cpi	r28, 0x04	; 4
     98a:	49 f4       	brne	.+18     	; 0x99e <serialProcess+0xa6>
    }
    else if(cmd == SERIAL_SPI_DATA)
    {
        uint8_t i=0;
        LEDs_ToggleLEDs(LEDS_LED2);
        for(i=0; i<size; i++)
     98c:	82 e1       	ldi	r24, 0x12	; 18
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	3e df       	rcall	.-388    	; 0x80e <RingBuffer_Remove.constprop.1>
     992:	88 23       	and	r24, r24
        {
            SPI_SendByte(RingBuffer_Remove(&buffer_));
        }
    }
    else if(cmd == SERIAL_SPI_SELECT)
     994:	11 f0       	breq	.+4      	; 0x99a <serialProcess+0xa2>
     996:	5b 98       	cbi	0x0b, 3	; 11
    {
        uint8_t prop = RingBuffer_Remove(&buffer_);
     998:	12 c0       	rjmp	.+36     	; 0x9be <serialProcess+0xc6>
     99a:	5b 9a       	sbi	0x0b, 3	; 11
     99c:	10 c0       	rjmp	.+32     	; 0x9be <serialProcess+0xc6>
     99e:	c6 30       	cpi	r28, 0x06	; 6
        if(prop)
     9a0:	81 f4       	brne	.+32     	; 0x9c2 <serialProcess+0xca>
     9a2:	84 b1       	in	r24, 0x04	; 4
        {
            PORTD &= ~_BV(PD3);
     9a4:	89 7f       	andi	r24, 0xF9	; 249
     9a6:	84 b9       	out	0x04, r24	; 4
        }
        else
        {
            PORTD |=  _BV(PD3);
     9a8:	85 b1       	in	r24, 0x05	; 5
     9aa:	86 7f       	andi	r24, 0xF6	; 246
        }
    }
    else if(cmd == SERIAL_USE_USART)
     9ac:	85 b9       	out	0x05, r24	; 5
     9ae:	1c bc       	out	0x2c, r1	; 44
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     9b0:	1d bc       	out	0x2d, r1	; 45
     9b2:	85 b1       	in	r24, 0x05	; 5
     9b4:	89 7f       	andi	r24, 0xF9	; 249
				PORTB &= ~((1 << 0) | (1 << 3));
     9b6:	85 b9       	out	0x05, r24	; 5
     9b8:	84 b1       	in	r24, 0x04	; 4
     9ba:	86 60       	ori	r24, 0x06	; 6

				SPCR   = 0;
     9bc:	84 b9       	out	0x04, r24	; 4
				SPSR   = 0;
     9be:	81 e0       	ldi	r24, 0x01	; 1
    {
        SPI_Disable();
        PORTB &= ~((1 << 1) | (1 << 2));
     9c0:	2d c0       	rjmp	.+90     	; 0xa1c <serialProcess+0x124>
     9c2:	c5 30       	cpi	r28, 0x05	; 5
     9c4:	81 f4       	brne	.+32     	; 0x9e6 <serialProcess+0xee>
        DDRB  |=   (1 << 1) | (1 << 2);
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <serialProcess+0xe6>
     9c8:	82 e1       	ldi	r24, 0x12	; 18
     9ca:	92 e0       	ldi	r25, 0x02	; 2
        for(i=0; i<size; i++)
            RingBuffer_Remove(&buffer_);
        return false;
    }

    return true;
     9cc:	20 df       	rcall	.-448    	; 0x80e <RingBuffer_Remove.constprop.1>
     9ce:	90 91 c8 00 	lds	r25, 0x00C8
    {
        SPI_Disable();
        PORTB &= ~((1 << 1) | (1 << 2));
        DDRB  |=   (1 << 1) | (1 << 2);
    }
    else if(cmd == SERIAL_USART_DATA)
     9d2:	95 ff       	sbrs	r25, 5
     9d4:	fc cf       	rjmp	.-8      	; 0x9ce <serialProcess+0xd6>
    {
        uint8_t i=0;
        for(i=0; i<size; i++)
        {
            Serial_SendByte(RingBuffer_Remove(&buffer_));
     9d6:	80 93 ce 00 	sts	0x00CE, r24
     9da:	cf 5f       	subi	r28, 0xFF	; 255
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <serialProcess+0xe8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     9de:	c0 e0       	ldi	r28, 0x00	; 0
     9e0:	cd 13       	cpse	r28, r29
     9e2:	f2 cf       	rjmp	.-28     	; 0x9c8 <serialProcess+0xd0>
     9e4:	ec cf       	rjmp	.-40     	; 0x9be <serialProcess+0xc6>
				UDR1 = DataByte;
     9e6:	c8 30       	cpi	r28, 0x08	; 8
     9e8:	39 f4       	brne	.+14     	; 0x9f8 <serialProcess+0x100>
        DDRB  |=   (1 << 1) | (1 << 2);
    }
    else if(cmd == SERIAL_USART_DATA)
    {
        uint8_t i=0;
        for(i=0; i<size; i++)
     9ea:	29 9a       	sbi	0x05, 1	; 5
     9ec:	8a e1       	ldi	r24, 0x1A	; 26
    {
        SPI_Disable();
        PORTB &= ~((1 << 1) | (1 << 2));
        DDRB  |=   (1 << 1) | (1 << 2);
    }
    else if(cmd == SERIAL_USART_DATA)
     9ee:	8a 95       	dec	r24
    {
        uint8_t i=0;
        for(i=0; i<size; i++)
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <serialProcess+0xf6>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <serialProcess+0xfc>
     9f4:	29 98       	cbi	0x05, 1	; 5
        {
            Serial_SendByte(RingBuffer_Remove(&buffer_));
        }
    }
    else if(cmd == SERIAL_FPGA_RESET)
     9f6:	e3 cf       	rjmp	.-58     	; 0x9be <serialProcess+0xc6>
     9f8:	c9 30       	cpi	r28, 0x09	; 9
    {
        PORTB |=  (1 << 1);
     9fa:	61 f4       	brne	.+24     	; 0xa14 <serialProcess+0x11c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fc:	2a 9a       	sbi	0x05, 2	; 5
     9fe:	8a e1       	ldi	r24, 0x1A	; 26
     a00:	8a 95       	dec	r24
     a02:	f1 f7       	brne	.-4      	; 0xa00 <serialProcess+0x108>
        _delay_us(5);
        PORTB &= ~(1 << 1);
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <serialProcess+0x10e>
     a06:	2a 98       	cbi	0x05, 2	; 5
    }
    else if(cmd == SERIAL_FPGA_START)
     a08:	da cf       	rjmp	.-76     	; 0x9be <serialProcess+0xc6>
     a0a:	82 e1       	ldi	r24, 0x12	; 18
    {
        PORTB |=  (1 << 2);
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	ff de       	rcall	.-514    	; 0x80e <RingBuffer_Remove.constprop.1>
     a10:	cf 5f       	subi	r28, 0xFF	; 255
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <serialProcess+0x11e>
     a14:	c0 e0       	ldi	r28, 0x00	; 0
        _delay_us(5);
        PORTB &= ~(1 << 2);
     a16:	cd 13       	cpse	r28, r29
     a18:	f8 cf       	rjmp	.-16     	; 0xa0a <serialProcess+0x112>
    }
    else
    {
        uint8_t i=0;
        for(i=0; i<size; i++)
            RingBuffer_Remove(&buffer_);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a22:	98 2f       	mov	r25, r24
     a24:	2c c0       	rjmp	.+88     	; 0xa7e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a26:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     a2a:	98 17       	cp	r25, r24
     a2c:	39 f0       	breq	.+14     	; 0xa3c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     a2e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     a32:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     a36:	50 91 f0 00 	lds	r21, 0x00F0
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     a3c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     a3e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     a40:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     a42:	21 fd       	sbrc	r18, 1
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a46:	9f 5f       	subi	r25, 0xFF	; 255
     a48:	1a c0       	rjmp	.+52     	; 0xa7e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     a4a:	30 91 eb 00 	lds	r19, 0x00EB
     a4e:	3e 7f       	andi	r19, 0xFE	; 254
     a50:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     a54:	30 91 ed 00 	lds	r19, 0x00ED
     a58:	3d 7f       	andi	r19, 0xFD	; 253
     a5a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     a5e:	30 91 eb 00 	lds	r19, 0x00EB
     a62:	31 60       	ori	r19, 0x01	; 1
     a64:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     a68:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     a6c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     a70:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     a74:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     a78:	27 fd       	sbrc	r18, 7
     a7a:	e5 cf       	rjmp	.-54     	; 0xa46 <Endpoint_ConfigureEndpoint_Prv+0x24>
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a7e:	95 30       	cpi	r25, 0x05	; 5
     a80:	90 f2       	brcs	.-92     	; 0xa26 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a82:	8f 70       	andi	r24, 0x0F	; 15
     a84:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     a8e:	08 95       	ret

00000a90 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	06 2f       	mov	r16, r22
     a9a:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	2e c0       	rjmp	.+92     	; 0xafc <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
     aa0:	98 81       	ld	r25, Y
     aa2:	91 11       	cpse	r25, r1
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aa6:	1f 5f       	subi	r17, 0xFF	; 255
     aa8:	25 96       	adiw	r28, 0x05	; 5
     aaa:	28 c0       	rjmp	.+80     	; 0xafc <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     aac:	2c 81       	ldd	r18, Y+4	; 0x04
     aae:	e9 81       	ldd	r30, Y+1	; 0x01
     ab0:	fa 81       	ldd	r31, Y+2	; 0x02
     ab2:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     ab4:	89 2f       	mov	r24, r25
     ab6:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     ab8:	85 30       	cpi	r24, 0x05	; 5
     aba:	10 f0       	brcs	.+4      	; 0xac0 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	21 c0       	rjmp	.+66     	; 0xb02 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     ac0:	22 30       	cpi	r18, 0x02	; 2
     ac2:	10 f0       	brcs	.+4      	; 0xac8 <Endpoint_ConfigureEndpointTable+0x38>
     ac4:	56 e0       	ldi	r21, 0x06	; 6
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <Endpoint_ConfigureEndpointTable+0x3a>
     ac8:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     aca:	28 e0       	ldi	r18, 0x08	; 8
     acc:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     ad2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     ad8:	2e 17       	cp	r18, r30
     ada:	3f 07       	cpc	r19, r31
     adc:	d0 f3       	brcs	.-12     	; 0xad2 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ade:	42 95       	swap	r20
     ae0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     ae2:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     ae4:	99 1f       	adc	r25, r25
     ae6:	99 27       	eor	r25, r25
     ae8:	99 1f       	adc	r25, r25
     aea:	62 95       	swap	r22
     aec:	66 0f       	add	r22, r22
     aee:	66 0f       	add	r22, r22
     af0:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     af2:	69 2b       	or	r22, r25
     af4:	96 df       	rcall	.-212    	; 0xa22 <Endpoint_ConfigureEndpoint_Prv>
     af6:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     af8:	d6 cf       	rjmp	.-84     	; 0xaa6 <Endpoint_ConfigureEndpointTable+0x16>
     afa:	e0 cf       	rjmp	.-64     	; 0xabc <Endpoint_ConfigureEndpointTable+0x2c>
     afc:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     afe:	d0 cf       	rjmp	.-96     	; 0xaa0 <Endpoint_ConfigureEndpointTable+0x10>
     b00:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     b02:	df 91       	pop	r29
}
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     b0c:	80 91 a3 02 	lds	r24, 0x02A3
     b10:	87 fd       	sbrc	r24, 7
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b14:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b18:	80 ff       	sbrs	r24, 0
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <Endpoint_ClearStatusStage+0x2a>
     b1c:	10 c0       	rjmp	.+32     	; 0xb3e <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b1e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     b22:	82 fd       	sbrc	r24, 2
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b26:	8e b3       	in	r24, 0x1e	; 30
     b28:	81 11       	cpse	r24, r1
     b2a:	f9 cf       	rjmp	.-14     	; 0xb1e <Endpoint_ClearStatusStage+0x12>
     b2c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b2e:	80 91 e8 00 	lds	r24, 0x00E8
     b32:	8b 77       	andi	r24, 0x7B	; 123
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b36:	8e b3       	in	r24, 0x1e	; 30
     b38:	81 11       	cpse	r24, r1
     b3a:	ec cf       	rjmp	.-40     	; 0xb14 <Endpoint_ClearStatusStage+0x8>
     b3c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b3e:	80 91 e8 00 	lds	r24, 0x00E8
     b42:	8e 77       	andi	r24, 0x7E	; 126
     b44:	80 93 e8 00 	sts	0x00E8, r24
     b48:	08 95       	ret

00000b4a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b4a:	80 91 e4 00 	lds	r24, 0x00E4
     b4e:	90 91 e5 00 	lds	r25, 0x00E5
     b52:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b54:	20 91 ec 00 	lds	r18, 0x00EC
     b58:	20 fd       	sbrc	r18, 0
     b5a:	1e c0       	rjmp	.+60     	; 0xb98 <Endpoint_WaitUntilReady+0x4e>
     b5c:	22 c0       	rjmp	.+68     	; 0xba2 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b5e:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b60:	22 23       	and	r18, r18
     b62:	91 f0       	breq	.+36     	; 0xb88 <Endpoint_WaitUntilReady+0x3e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b64:	25 30       	cpi	r18, 0x05	; 5
     b66:	91 f0       	breq	.+36     	; 0xb8c <Endpoint_WaitUntilReady+0x42>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b68:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b6c:	25 fd       	sbrc	r18, 5
     b6e:	10 c0       	rjmp	.+32     	; 0xb90 <Endpoint_WaitUntilReady+0x46>
     b70:	20 91 e4 00 	lds	r18, 0x00E4
     b74:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b78:	28 17       	cp	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	59 f3       	breq	.-42     	; 0xb54 <Endpoint_WaitUntilReady+0xa>
     b7e:	41 50       	subi	r20, 0x01	; 1
     b80:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b82:	41 f7       	brne	.-48     	; 0xb54 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b98:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b9c:	20 ff       	sbrs	r18, 0
     b9e:	df cf       	rjmp	.-66     	; 0xb5e <Endpoint_WaitUntilReady+0x14>
     ba0:	f9 cf       	rjmp	.-14     	; 0xb94 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ba2:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ba6:	22 ff       	sbrs	r18, 2
     ba8:	da cf       	rjmp	.-76     	; 0xb5e <Endpoint_WaitUntilReady+0x14>
     baa:	f4 cf       	rjmp	.-24     	; 0xb94 <Endpoint_WaitUntilReady+0x4a>

00000bac <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bac:	40 d0       	rcall	.+128    	; 0xc2e <USB_INT_DisableAllInterrupts>
     bae:	42 d0       	rcall	.+132    	; 0xc34 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bb0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bb4:	8f 77       	andi	r24, 0x7F	; 127
     bb6:	80 93 d8 00 	sts	0x00D8, r24
     bba:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	80 93 d8 00 	sts	0x00D8, r24
     bc4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bc8:	8f 7d       	andi	r24, 0xDF	; 223
     bca:	80 93 d8 00 	sts	0x00D8, r24
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bd6:	09 b4       	in	r0, 0x29	; 41
     bd8:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <USB_ResetInterface+0x2a>
     bdc:	1e ba       	out	0x1e, r1	; 30
     bde:	10 92 9f 02 	sts	0x029F, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     be2:	10 92 a1 02 	sts	0x02A1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     be6:	10 92 a0 02 	sts	0x02A0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     bea:	42 e0       	ldi	r20, 0x02	; 2
     bec:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	18 df       	rcall	.-464    	; 0xa22 <Endpoint_ConfigureEndpoint_Prv>
     bf2:	80 91 e1 00 	lds	r24, 0x00E1
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bf8:	80 93 e1 00 	sts	0x00E1, r24
     bfc:	80 91 e2 00 	lds	r24, 0x00E2
     c00:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c02:	80 93 e2 00 	sts	0x00E2, r24
     c06:	80 91 e2 00 	lds	r24, 0x00E2
     c0a:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c0c:	80 93 e2 00 	sts	0x00E2, r24
     c10:	80 91 e0 00 	lds	r24, 0x00E0
     c14:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c16:	80 93 e0 00 	sts	0x00E0, r24
     c1a:	08 95       	ret

00000c1c <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     c1c:	e3 e6       	ldi	r30, 0x63	; 99
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 a2 02 	sts	0x02A2, r24

	USB_ResetInterface();
     c2c:	bf cf       	rjmp	.-130    	; 0xbac <USB_ResetInterface>

00000c2e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c2e:	10 92 e2 00 	sts	0x00E2, r1
     c32:	08 95       	ret

00000c34 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c34:	10 92 e1 00 	sts	0x00E1, r1
     c38:	08 95       	ret

00000c3a <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	2f 93       	push	r18
     c46:	3f 93       	push	r19
     c48:	4f 93       	push	r20
     c4a:	5f 93       	push	r21
     c4c:	6f 93       	push	r22
     c4e:	7f 93       	push	r23
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     c5c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     c60:	82 ff       	sbrs	r24, 2
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     c64:	80 91 e2 00 	lds	r24, 0x00E2
     c68:	82 ff       	sbrs	r24, 2
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     c6c:	80 91 e1 00 	lds	r24, 0x00E1
     c70:	8b 7f       	andi	r24, 0xFB	; 251
     c72:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     c76:	eb d2       	rcall	.+1494   	; 0x124e <USB_Event_Stub>
     c78:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c7c:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c7e:	16 c0       	rjmp	.+44     	; 0xcac <__vector_11+0x72>
     c80:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c84:	80 ff       	sbrs	r24, 0
     c86:	12 c0       	rjmp	.+36     	; 0xcac <__vector_11+0x72>
     c88:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	80 93 e2 00 	sts	0x00E2, r24
     c92:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c96:	80 61       	ori	r24, 0x10	; 16
     c98:	80 93 e2 00 	sts	0x00E2, r24
     c9c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     ca0:	80 62       	ori	r24, 0x20	; 32
     ca2:	80 93 d8 00 	sts	0x00D8, r24
     ca6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ca8:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     caa:	50 db       	rcall	.-2400   	; 0x34c <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     cac:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     cb0:	84 ff       	sbrs	r24, 4
     cb2:	2c c0       	rjmp	.+88     	; 0xd0c <__vector_11+0xd2>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     cb4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     cb8:	84 ff       	sbrs	r24, 4
     cba:	28 c0       	rjmp	.+80     	; 0xd0c <__vector_11+0xd2>
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cc4:	09 b4       	in	r0, 0x29	; 41
     cc6:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cc8:	fd cf       	rjmp	.-6      	; 0xcc4 <__vector_11+0x8a>
     cca:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	80 93 d8 00 	sts	0x00D8, r24
     cd4:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     cd8:	8f 7e       	andi	r24, 0xEF	; 239
     cda:	80 93 e1 00 	sts	0x00E1, r24
     cde:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     ce2:	8f 7e       	andi	r24, 0xEF	; 239
     ce4:	80 93 e2 00 	sts	0x00E2, r24
     ce8:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	80 93 e2 00 	sts	0x00E2, r24
     cf2:	80 91 9f 02 	lds	r24, 0x029F
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     cf6:	81 11       	cpse	r24, r1
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <__vector_11+0xc8>
     cfa:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cfe:	87 ff       	sbrs	r24, 7
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <__vector_11+0xcc>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <__vector_11+0xce>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8e bb       	out	0x1e, r24	; 30
     d0a:	1e db       	rcall	.-2500   	; 0x348 <EVENT_USB_Device_Connect>
     d0c:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     d10:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     d12:	26 c0       	rjmp	.+76     	; 0xd60 <__vector_11+0x126>
     d14:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     d18:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     d1a:	22 c0       	rjmp	.+68     	; 0xd60 <__vector_11+0x126>
     d1c:	80 91 e1 00 	lds	r24, 0x00E1
     d20:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     d22:	80 93 e1 00 	sts	0x00E1, r24
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	8e bb       	out	0x1e, r24	; 30
     d2a:	10 92 9f 02 	sts	0x029F, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     d2e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     d32:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d34:	80 93 e1 00 	sts	0x00E1, r24
     d38:	80 91 e2 00 	lds	r24, 0x00E2
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d3e:	80 93 e2 00 	sts	0x00E2, r24
     d42:	80 91 e2 00 	lds	r24, 0x00E2
     d46:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d48:	80 93 e2 00 	sts	0x00E2, r24
     d4c:	42 e0       	ldi	r20, 0x02	; 2
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     d52:	67 de       	rcall	.-818    	; 0xa22 <Endpoint_ConfigureEndpoint_Prv>
     d54:	80 91 f0 00 	lds	r24, 0x00F0
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d5e:	77 d2       	rcall	.+1262   	; 0x124e <USB_Event_Stub>
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	cf 93       	push	r28
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     da6:	80 91 e9 00 	lds	r24, 0x00E9
     daa:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dac:	90 91 ec 00 	lds	r25, 0x00EC
     db0:	90 ff       	sbrs	r25, 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <__vector_12+0x36>
     db4:	90 e8       	ldi	r25, 0x80	; 128
     db6:	01 c0       	rjmp	.+2      	; 0xdba <__vector_12+0x38>
     db8:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     dba:	c9 2f       	mov	r28, r25
     dbc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dbe:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     dc2:	80 91 f0 00 	lds	r24, 0x00F0
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     dcc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     dce:	d9 d0       	rcall	.+434    	; 0xf82 <USB_Device_ProcessControlRequest>
     dd0:	10 92 e9 00 	sts	0x00E9, r1
     dd4:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     dd8:	88 60       	ori	r24, 0x08	; 8
     dda:	80 93 f0 00 	sts	0x00F0, r24
     dde:	cf 70       	andi	r28, 0x0F	; 15
     de0:	c0 93 e9 00 	sts	0x00E9, r28
     de4:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     de6:	ef 91       	pop	r30
     de8:	cf 91       	pop	r28
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e08:	20 91 a9 02 	lds	r18, 0x02A9
     e0c:	30 91 aa 02 	lds	r19, 0x02AA
     e10:	26 17       	cp	r18, r22
     e12:	37 07       	cpc	r19, r23
     e14:	48 f0       	brcs	.+18     	; 0xe28 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e16:	61 15       	cp	r22, r1
     e18:	71 05       	cpc	r23, r1
     e1a:	39 f4       	brne	.+14     	; 0xe2a <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e1c:	20 91 e8 00 	lds	r18, 0x00E8
     e20:	2e 77       	andi	r18, 0x7E	; 126
     e22:	20 93 e8 00 	sts	0x00E8, r18
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e28:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e2a:	9c 01       	movw	r18, r24
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	33 c0       	rjmp	.+102    	; 0xe96 <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e30:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e32:	99 23       	and	r25, r25
     e34:	09 f4       	brne	.+2      	; 0xe38 <Endpoint_Write_Control_Stream_LE+0x30>
     e36:	42 c0       	rjmp	.+132    	; 0xebc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e38:	95 30       	cpi	r25, 0x05	; 5
     e3a:	09 f4       	brne	.+2      	; 0xe3e <Endpoint_Write_Control_Stream_LE+0x36>
     e3c:	41 c0       	rjmp	.+130    	; 0xec0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e3e:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e42:	93 fd       	sbrc	r25, 3
     e44:	39 c0       	rjmp	.+114    	; 0xeb8 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e46:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e4a:	92 fd       	sbrc	r25, 2
     e4c:	2f c0       	rjmp	.+94     	; 0xeac <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4e:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e52:	90 ff       	sbrs	r25, 0
     e54:	20 c0       	rjmp	.+64     	; 0xe96 <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e56:	80 91 f2 00 	lds	r24, 0x00F2
     e5a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e5c:	f9 01       	movw	r30, r18
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     e5e:	82 1b       	sub	r24, r18
     e60:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e64:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e66:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     e6a:	61 50       	subi	r22, 0x01	; 1
     e6c:	71 09       	sbc	r23, r1
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     e6e:	9f 01       	movw	r18, r30
     e70:	28 0f       	add	r18, r24
     e72:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e74:	61 15       	cp	r22, r1
     e76:	71 05       	cpc	r23, r1
     e78:	19 f0       	breq	.+6      	; 0xe80 <Endpoint_Write_Control_Stream_LE+0x78>
     e7a:	28 30       	cpi	r18, 0x08	; 8
     e7c:	31 05       	cpc	r19, r1
     e7e:	90 f3       	brcs	.-28     	; 0xe64 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	28 30       	cpi	r18, 0x08	; 8
     e84:	31 05       	cpc	r19, r1
     e86:	09 f0       	breq	.+2      	; 0xe8a <Endpoint_Write_Control_Stream_LE+0x82>
     e88:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e8a:	90 91 e8 00 	lds	r25, 0x00E8
     e8e:	9e 77       	andi	r25, 0x7E	; 126
     e90:	90 93 e8 00 	sts	0x00E8, r25
     e94:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	51 f6       	brne	.-108    	; 0xe30 <Endpoint_Write_Control_Stream_LE+0x28>
     e9c:	81 11       	cpse	r24, r1
     e9e:	c8 cf       	rjmp	.-112    	; 0xe30 <Endpoint_Write_Control_Stream_LE+0x28>
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ea2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ea4:	88 23       	and	r24, r24
     ea6:	51 f0       	breq	.+20     	; 0xebc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ea8:	85 30       	cpi	r24, 0x05	; 5
     eaa:	51 f0       	breq	.+20     	; 0xec0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     eb0:	82 ff       	sbrs	r24, 2
     eb2:	f7 cf       	rjmp	.-18     	; 0xea2 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ec0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ec2:	08 95       	ret

00000ec4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ec4:	20 91 a9 02 	lds	r18, 0x02A9
     ec8:	30 91 aa 02 	lds	r19, 0x02AA
     ecc:	26 17       	cp	r18, r22
     ece:	37 07       	cpc	r19, r23
     ed0:	48 f0       	brcs	.+18     	; 0xee4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ed2:	61 15       	cp	r22, r1
     ed4:	71 05       	cpc	r23, r1
     ed6:	39 f4       	brne	.+14     	; 0xee6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed8:	20 91 e8 00 	lds	r18, 0x00E8
     edc:	2e 77       	andi	r18, 0x7E	; 126
     ede:	20 93 e8 00 	sts	0x00E8, r18
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ee4:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ee6:	9c 01       	movw	r18, r24
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	34 c0       	rjmp	.+104    	; 0xf54 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     eec:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     eee:	99 23       	and	r25, r25
     ef0:	09 f4       	brne	.+2      	; 0xef4 <Endpoint_Write_Control_PStream_LE+0x30>
     ef2:	43 c0       	rjmp	.+134    	; 0xf7a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ef4:	95 30       	cpi	r25, 0x05	; 5
     ef6:	09 f4       	brne	.+2      	; 0xefa <Endpoint_Write_Control_PStream_LE+0x36>
     ef8:	42 c0       	rjmp	.+132    	; 0xf7e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     efa:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     efe:	93 fd       	sbrc	r25, 3
     f00:	3a c0       	rjmp	.+116    	; 0xf76 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f02:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f06:	92 fd       	sbrc	r25, 2
     f08:	30 c0       	rjmp	.+96     	; 0xf6a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f0a:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f0e:	90 ff       	sbrs	r25, 0
     f10:	21 c0       	rjmp	.+66     	; 0xf54 <Endpoint_Write_Control_PStream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f12:	80 91 f2 00 	lds	r24, 0x00F2
     f16:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f18:	f9 01       	movw	r30, r18
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     f1a:	82 1b       	sub	r24, r18
     f1c:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f20:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f22:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     f26:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     f28:	61 50       	subi	r22, 0x01	; 1
     f2a:	71 09       	sbc	r23, r1
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     f2c:	9c 01       	movw	r18, r24
     f2e:	2e 0f       	add	r18, r30
     f30:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f32:	61 15       	cp	r22, r1
     f34:	71 05       	cpc	r23, r1
     f36:	19 f0       	breq	.+6      	; 0xf3e <Endpoint_Write_Control_PStream_LE+0x7a>
     f38:	28 30       	cpi	r18, 0x08	; 8
     f3a:	31 05       	cpc	r19, r1
     f3c:	88 f3       	brcs	.-30     	; 0xf20 <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	28 30       	cpi	r18, 0x08	; 8
     f42:	31 05       	cpc	r19, r1
     f44:	09 f0       	breq	.+2      	; 0xf48 <Endpoint_Write_Control_PStream_LE+0x84>
     f46:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f48:	90 91 e8 00 	lds	r25, 0x00E8
     f4c:	9e 77       	andi	r25, 0x7E	; 126
     f4e:	90 93 e8 00 	sts	0x00E8, r25
     f52:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f54:	61 15       	cp	r22, r1
     f56:	71 05       	cpc	r23, r1
     f58:	49 f6       	brne	.-110    	; 0xeec <Endpoint_Write_Control_PStream_LE+0x28>
     f5a:	81 11       	cpse	r24, r1
     f5c:	c7 cf       	rjmp	.-114    	; 0xeec <Endpoint_Write_Control_PStream_LE+0x28>
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f60:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f62:	88 23       	and	r24, r24
     f64:	51 f0       	breq	.+20     	; 0xf7a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	51 f0       	breq	.+20     	; 0xf7e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f6a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f6e:	82 ff       	sbrs	r24, 2
     f70:	f7 cf       	rjmp	.-18     	; 0xf60 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f7e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f80:	08 95       	ret

00000f82 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	ac 97       	sbiw	r28, 0x2c	; 44
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     f9e:	e3 ea       	ldi	r30, 0xA3	; 163
     fa0:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fa2:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     fa6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     fa8:	22 e0       	ldi	r18, 0x02	; 2
     faa:	eb 3a       	cpi	r30, 0xAB	; 171
     fac:	f2 07       	cpc	r31, r18
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     fb0:	d8 d9       	rcall	.-3152   	; 0x362 <EVENT_USB_Device_ControlRequest>
     fb2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fb6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     fb8:	2f c1       	rjmp	.+606    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
     fba:	80 91 a3 02 	lds	r24, 0x02A3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     fbe:	90 91 a4 02 	lds	r25, 0x02A4

		switch (USB_ControlRequest.bRequest)
     fc2:	95 30       	cpi	r25, 0x05	; 5
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <USB_Device_ProcessControlRequest+0x46>
     fc6:	87 c0       	rjmp	.+270    	; 0x10d6 <USB_Device_ProcessControlRequest+0x154>
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <USB_Device_ProcessControlRequest+0x56>
     fca:	91 30       	cpi	r25, 0x01	; 1
     fcc:	b1 f1       	breq	.+108    	; 0x103a <USB_Device_ProcessControlRequest+0xb8>
     fce:	70 f0       	brcs	.+28     	; 0xfec <USB_Device_ProcessControlRequest+0x6a>
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <USB_Device_ProcessControlRequest+0x54>
     fd4:	21 c1       	rjmp	.+578    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
     fd6:	31 c0       	rjmp	.+98     	; 0x103a <USB_Device_ProcessControlRequest+0xb8>
     fd8:	98 30       	cpi	r25, 0x08	; 8
     fda:	09 f4       	brne	.+2      	; 0xfde <USB_Device_ProcessControlRequest+0x5c>
     fdc:	f3 c0       	rjmp	.+486    	; 0x11c4 <USB_Device_ProcessControlRequest+0x242>
     fde:	99 30       	cpi	r25, 0x09	; 9
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <USB_Device_ProcessControlRequest+0x62>
     fe2:	ff c0       	rjmp	.+510    	; 0x11e2 <USB_Device_ProcessControlRequest+0x260>
     fe4:	96 30       	cpi	r25, 0x06	; 6
     fe6:	09 f0       	breq	.+2      	; 0xfea <USB_Device_ProcessControlRequest+0x68>
     fe8:	17 c1       	rjmp	.+558    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
     fea:	9b c0       	rjmp	.+310    	; 0x1122 <USB_Device_ProcessControlRequest+0x1a0>
     fec:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fee:	21 f0       	breq	.+8      	; 0xff8 <USB_Device_ProcessControlRequest+0x76>
     ff0:	82 38       	cpi	r24, 0x82	; 130
     ff2:	09 f0       	breq	.+2      	; 0xff6 <USB_Device_ProcessControlRequest+0x74>
     ff4:	11 c1       	rjmp	.+546    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <USB_Device_ProcessControlRequest+0x86>
     ff8:	80 91 a0 02 	lds	r24, 0x02A0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ffc:	90 91 a1 02 	lds	r25, 0x02A1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1000:	99 23       	and	r25, r25
    1002:	89 f0       	breq	.+34     	; 0x1026 <USB_Device_ProcessControlRequest+0xa4>
    1004:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <USB_Device_ProcessControlRequest+0xa4>
    1008:	80 91 a7 02 	lds	r24, 0x02A7
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    100c:	90 91 a8 02 	lds	r25, 0x02A8
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	99 27       	eor	r25, r25
    1014:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1018:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    101c:	85 fb       	bst	r24, 5
    101e:	88 27       	eor	r24, r24
    1020:	80 f9       	bld	r24, 0
    1022:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1026:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    102a:	97 7f       	andi	r25, 0xF7	; 247
    102c:	90 93 e8 00 	sts	0x00E8, r25
    1030:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1034:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    1038:	d0 c0       	rjmp	.+416    	; 0x11da <USB_Device_ProcessControlRequest+0x258>
    103a:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    103c:	19 f0       	breq	.+6      	; 0x1044 <USB_Device_ProcessControlRequest+0xc2>
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	09 f0       	breq	.+2      	; 0x1044 <USB_Device_ProcessControlRequest+0xc2>
    1042:	ea c0       	rjmp	.+468    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    1044:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1046:	21 f0       	breq	.+8      	; 0x1050 <USB_Device_ProcessControlRequest+0xce>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	09 f0       	breq	.+2      	; 0x104e <USB_Device_ProcessControlRequest+0xcc>
    104c:	e5 c0       	rjmp	.+458    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    104e:	0b c0       	rjmp	.+22     	; 0x1066 <USB_Device_ProcessControlRequest+0xe4>
    1050:	80 91 a5 02 	lds	r24, 0x02A5
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <USB_Device_ProcessControlRequest+0xd8>
    1058:	df c0       	rjmp	.+446    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    105a:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    105c:	09 f0       	breq	.+2      	; 0x1060 <USB_Device_ProcessControlRequest+0xde>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	80 93 a1 02 	sts	0x02A1, r24
    1064:	2f c0       	rjmp	.+94     	; 0x10c4 <USB_Device_ProcessControlRequest+0x142>
    1066:	80 91 a5 02 	lds	r24, 0x02A5

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    106a:	81 11       	cpse	r24, r1
    106c:	2b c0       	rjmp	.+86     	; 0x10c4 <USB_Device_ProcessControlRequest+0x142>
    106e:	80 91 a7 02 	lds	r24, 0x02A7
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1072:	90 91 a8 02 	lds	r25, 0x02A8
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	99 27       	eor	r25, r25
    107a:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    107c:	09 f4       	brne	.+2      	; 0x1080 <USB_Device_ProcessControlRequest+0xfe>
    107e:	cc c0       	rjmp	.+408    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    1080:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1084:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1088:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    108a:	1c c0       	rjmp	.+56     	; 0x10c4 <USB_Device_ProcessControlRequest+0x142>
    108c:	20 91 a4 02 	lds	r18, 0x02A4
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1090:	23 30       	cpi	r18, 0x03	; 3
    1092:	21 f4       	brne	.+8      	; 0x109c <USB_Device_ProcessControlRequest+0x11a>
    1094:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1098:	80 62       	ori	r24, 0x20	; 32
    109a:	12 c0       	rjmp	.+36     	; 0x10c0 <USB_Device_ProcessControlRequest+0x13e>
    109c:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    10a0:	90 61       	ori	r25, 0x10	; 16
    10a2:	90 93 eb 00 	sts	0x00EB, r25
    10a6:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <USB_Device_ProcessControlRequest+0x12c>
    10ac:	22 0f       	add	r18, r18
    10ae:	8a 95       	dec	r24
    10b0:	ea f7       	brpl	.-6      	; 0x10ac <USB_Device_ProcessControlRequest+0x12a>
    10b2:	20 93 ea 00 	sts	0x00EA, r18
    10b6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    10ba:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    10be:	88 60       	ori	r24, 0x08	; 8
    10c0:	80 93 eb 00 	sts	0x00EB, r24
    10c4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	80 93 e8 00 	sts	0x00E8, r24
    10d2:	1c dd       	rcall	.-1480   	; 0xb0c <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    10d4:	a1 c0       	rjmp	.+322    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    10d6:	81 11       	cpse	r24, r1
    10d8:	9f c0       	rjmp	.+318    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10da:	00 91 a5 02 	lds	r16, 0x02A5
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    10de:	10 91 a6 02 	lds	r17, 0x02A6
    10e2:	0f 77       	andi	r16, 0x7F	; 127
    10e4:	11 27       	eor	r17, r17
    10e6:	e0 2e       	mov	r14, r16
    10e8:	ff b6       	in	r15, 0x3f	; 63
    10ea:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    10ec:	80 91 e8 00 	lds	r24, 0x00E8
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	80 93 e8 00 	sts	0x00E8, r24
    10f6:	0a dd       	rcall	.-1516   	; 0xb0c <Endpoint_ClearStatusStage>
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    10fc:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10fe:	fc cf       	rjmp	.-8      	; 0x10f8 <USB_Device_ProcessControlRequest+0x176>
    1100:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    1104:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1106:	80 2b       	or	r24, r16
    1108:	80 93 e3 00 	sts	0x00E3, r24
    110c:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
    110e:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1112:	ee 20       	and	r14, r14
    1114:	11 f0       	breq	.+4      	; 0x111a <USB_Device_ProcessControlRequest+0x198>
    1116:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1118:	01 c0       	rjmp	.+2      	; 0x111c <USB_Device_ProcessControlRequest+0x19a>
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	8e bb       	out	0x1e, r24	; 30
    111e:	ff be       	out	0x3f, r15	; 63
    1120:	7b c0       	rjmp	.+246    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    1122:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1124:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1126:	08 f0       	brcs	.+2      	; 0x112a <USB_Device_ProcessControlRequest+0x1a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1128:	77 c0       	rjmp	.+238    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    112a:	80 91 a5 02 	lds	r24, 0x02A5
    112e:	90 91 a6 02 	lds	r25, 0x02A6
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1132:	8c 3d       	cpi	r24, 0xDC	; 220
    1134:	23 e0       	ldi	r18, 0x03	; 3
    1136:	92 07       	cpc	r25, r18
    1138:	71 f5       	brne	.+92     	; 0x1196 <USB_Device_ProcessControlRequest+0x214>
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1144:	f8 94       	cli
    1146:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1148:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    114a:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    114c:	3e e0       	ldi	r19, 0x0E	; 14
    114e:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1150:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1152:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1154:	50 93 57 00 	sts	0x0057, r21
    1158:	e4 91       	lpm	r30, Z+
    115a:	20 ff       	sbrs	r18, 0
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <USB_Device_ProcessControlRequest+0x1e2>
    115e:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    1160:	ef 70       	andi	r30, 0x0F	; 15
    1162:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    1164:	ef 70       	andi	r30, 0x0F	; 15
    1166:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    1168:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    116a:	ea 30       	cpi	r30, 0x0A	; 10
    116c:	10 f0       	brcs	.+4      	; 0x1172 <USB_Device_ProcessControlRequest+0x1f0>
    116e:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <USB_Device_ProcessControlRequest+0x1f2>
    1172:	c0 96       	adiw	r24, 0x30	; 48
    1174:	8d 93       	st	X+, r24
    1176:	9d 93       	st	X+, r25
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	24 31       	cpi	r18, 0x14	; 20
    117c:	49 f7       	brne	.-46     	; 0x1150 <USB_Device_ProcessControlRequest+0x1ce>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    117e:	4f bf       	out	0x3f, r20	; 63
    1180:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1184:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1186:	80 93 e8 00 	sts	0x00E8, r24
    118a:	6a e2       	ldi	r22, 0x2A	; 42
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	3a de       	rcall	.-908    	; 0xe08 <Endpoint_Write_Control_Stream_LE>
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <USB_Device_ProcessControlRequest+0x236>
    1196:	ae 01       	movw	r20, r28
    1198:	45 5d       	subi	r20, 0xD5	; 213
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	60 91 a7 02 	lds	r22, 0x02A7
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    11a0:	26 d9       	rcall	.-3508   	; 0x3ee <CALLBACK_USB_GetDescriptor>
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	c9 f1       	breq	.+114    	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    11a6:	20 91 e8 00 	lds	r18, 0x00E8
    11aa:	27 7f       	andi	r18, 0xF7	; 247
    11ac:	20 93 e8 00 	sts	0x00E8, r18
    11b0:	bc 01       	movw	r22, r24
    11b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b6:	86 de       	rcall	.-756    	; 0xec4 <Endpoint_Write_Control_PStream_LE>
    11b8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    11bc:	8b 77       	andi	r24, 0x7B	; 123
    11be:	80 93 e8 00 	sts	0x00E8, r24
    11c2:	2a c0       	rjmp	.+84     	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11c4:	80 38       	cpi	r24, 0x80	; 128
    11c6:	41 f5       	brne	.+80     	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
    11c8:	80 91 e8 00 	lds	r24, 0x00E8
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    11d2:	80 91 9f 02 	lds	r24, 0x029F
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d6:	80 93 f1 00 	sts	0x00F1, r24
    11da:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    11de:	8e 77       	andi	r24, 0x7E	; 126
    11e0:	76 cf       	rjmp	.-276    	; 0x10ce <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11e2:	81 11       	cpse	r24, r1
    11e4:	19 c0       	rjmp	.+50     	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11e6:	90 91 a5 02 	lds	r25, 0x02A5
    11ea:	92 30       	cpi	r25, 0x02	; 2
    11ec:	a8 f4       	brcc	.+42     	; 0x1218 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11ee:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11f2:	87 7f       	andi	r24, 0xF7	; 247
    11f4:	80 93 e8 00 	sts	0x00E8, r24
    11f8:	90 93 9f 02 	sts	0x029F, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11fc:	87 dc       	rcall	.-1778   	; 0xb0c <Endpoint_ClearStatusStage>
    11fe:	80 91 9f 02 	lds	r24, 0x029F
    1202:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1204:	04 c0       	rjmp	.+8      	; 0x120e <USB_Device_ProcessControlRequest+0x28c>
    1206:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    120a:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <USB_Device_ProcessControlRequest+0x290>
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <USB_Device_ProcessControlRequest+0x292>
    1212:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1214:	8e bb       	out	0x1e, r24	; 30
    1216:	9c d8       	rcall	.-3784   	; 0x350 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1218:	80 91 e8 00 	lds	r24, 0x00E8
    121c:	83 ff       	sbrs	r24, 3
    121e:	0a c0       	rjmp	.+20     	; 0x1234 <USB_Device_ProcessControlRequest+0x2b2>
    1220:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    122a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    122e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1230:	80 93 e8 00 	sts	0x00E8, r24
    1234:	ac 96       	adiw	r28, 0x2c	; 44
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	08 95       	ret

0000124e <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
    124e:	08 95       	ret

00001250 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1250:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1252:	8e b3       	in	r24, 0x1e	; 30
    1254:	88 23       	and	r24, r24
    1256:	a9 f0       	breq	.+42     	; 0x1282 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1258:	80 91 e9 00 	lds	r24, 0x00E9
    125c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    125e:	90 91 ec 00 	lds	r25, 0x00EC
    1262:	90 ff       	sbrs	r25, 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <USB_USBTask+0x1a>
    1266:	90 e8       	ldi	r25, 0x80	; 128
    1268:	01 c0       	rjmp	.+2      	; 0x126c <USB_USBTask+0x1c>
    126a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    126c:	c9 2f       	mov	r28, r25
    126e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1270:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1274:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1278:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    127a:	83 de       	rcall	.-762    	; 0xf82 <USB_Device_ProcessControlRequest>
    127c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127e:	c0 93 e9 00 	sts	0x00E9, r28
    1282:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    1284:	08 95       	ret

00001286 <CDC_Device_ConfigureEndpoints>:
    1286:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    128c:	40 96       	adiw	r24, 0x10	; 16
    128e:	fc 01       	movw	r30, r24
    1290:	8b e0       	ldi	r24, 0x0B	; 11
    1292:	df 01       	movw	r26, r30
    1294:	1d 92       	st	X+, r1
    1296:	8a 95       	dec	r24
    1298:	e9 f7       	brne	.-6      	; 0x1294 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    129e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	f2 db       	rcall	.-2076   	; 0xa90 <Endpoint_ConfigureEndpointTable>
    12ac:	88 23       	and	r24, r24
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <CDC_Device_ConfigureEndpoints+0x42>
    12b0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    12b2:	ce 01       	movw	r24, r28
    12b4:	06 96       	adiw	r24, 0x06	; 6
    12b6:	ec db       	rcall	.-2088   	; 0xa90 <Endpoint_ConfigureEndpointTable>
    12b8:	88 23       	and	r24, r24
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <CDC_Device_ConfigureEndpoints+0x42>
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    12c0:	0b 96       	adiw	r24, 0x0b	; 11
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
	  return false;

	return true;
}
    12c6:	e4 cb       	rjmp	.-2104   	; 0xa90 <Endpoint_ConfigureEndpointTable>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
	  return false;

	return true;
}
    12ce:	08 95       	ret

000012d0 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    12d0:	cf 93       	push	r28
    12d2:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    12d4:	2e b3       	in	r18, 0x1e	; 30
    12d6:	24 30       	cpi	r18, 0x04	; 4
    12d8:	f1 f4       	brne	.+60     	; 0x1316 <CDC_Device_SendByte+0x46>
    12da:	fc 01       	movw	r30, r24
    12dc:	44 89       	ldd	r20, Z+20	; 0x14
    12de:	55 89       	ldd	r21, Z+21	; 0x15
    12e0:	66 89       	ldd	r22, Z+22	; 0x16
    12e2:	77 89       	ldd	r23, Z+23	; 0x17
    12e4:	45 2b       	or	r20, r21
    12e6:	46 2b       	or	r20, r22
    12e8:	47 2b       	or	r20, r23
    12ea:	a9 f0       	breq	.+42     	; 0x1316 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	8f 70       	andi	r24, 0x0F	; 15
    12f0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12f4:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    12f8:	85 ff       	sbrs	r24, 5
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12fc:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0a c0       	rjmp	.+20     	; 0x1318 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1304:	80 91 e8 00 	lds	r24, 0x00E8
    1308:	8e 77       	andi	r24, 0x7E	; 126
    130a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    130e:	1d dc       	rcall	.-1990   	; 0xb4a <Endpoint_WaitUntilReady>
    1310:	88 23       	and	r24, r24
    1312:	a1 f3       	breq	.-24     	; 0x12fc <CDC_Device_SendByte+0x2c>
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <CDC_Device_SendByte+0x48>
    1316:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1318:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    131a:	08 95       	ret

0000131c <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    131c:	2e b3       	in	r18, 0x1e	; 30
    131e:	24 30       	cpi	r18, 0x04	; 4
    1320:	29 f5       	brne	.+74     	; 0x136c <CDC_Device_Flush+0x50>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1322:	fc 01       	movw	r30, r24
    1324:	44 89       	ldd	r20, Z+20	; 0x14
    1326:	55 89       	ldd	r21, Z+21	; 0x15
    1328:	66 89       	ldd	r22, Z+22	; 0x16
    132a:	77 89       	ldd	r23, Z+23	; 0x17
    132c:	45 2b       	or	r20, r21
    132e:	46 2b       	or	r20, r22
    1330:	47 2b       	or	r20, r23
    1332:	e1 f0       	breq	.+56     	; 0x136c <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1334:	81 81       	ldd	r24, Z+1	; 0x01
    1336:	8f 70       	andi	r24, 0x0F	; 15
    1338:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    133c:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1340:	81 11       	cpse	r24, r1
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <CDC_Device_Flush+0x2c>
	  return ENDPOINT_READYWAIT_NoError;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1348:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    134c:	80 91 e8 00 	lds	r24, 0x00E8
    1350:	8e 77       	andi	r24, 0x7E	; 126
    1352:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1356:	95 fd       	sbrc	r25, 5
    1358:	f5 cf       	rjmp	.-22     	; 0x1344 <CDC_Device_Flush+0x28>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    135a:	f7 db       	rcall	.-2066   	; 0xb4a <Endpoint_WaitUntilReady>
    135c:	81 11       	cpse	r24, r1
    135e:	07 c0       	rjmp	.+14     	; 0x136e <CDC_Device_Flush+0x52>
    1360:	90 91 e8 00 	lds	r25, 0x00E8
    1364:	9e 77       	andi	r25, 0x7E	; 126
    1366:	90 93 e8 00 	sts	0x00E8, r25
    136a:	08 95       	ret
    136c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    136e:	08 95       	ret

00001370 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1370:	2e b3       	in	r18, 0x1e	; 30
    1372:	24 30       	cpi	r18, 0x04	; 4
    1374:	51 f4       	brne	.+20     	; 0x138a <CDC_Device_USBTask+0x1a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1376:	fc 01       	movw	r30, r24
    1378:	44 89       	ldd	r20, Z+20	; 0x14
    137a:	55 89       	ldd	r21, Z+21	; 0x15
    137c:	66 89       	ldd	r22, Z+22	; 0x16
    137e:	77 89       	ldd	r23, Z+23	; 0x17
    1380:	45 2b       	or	r20, r21
    1382:	46 2b       	or	r20, r22
    1384:	47 2b       	or	r20, r23
    1386:	09 f0       	breq	.+2      	; 0x138a <CDC_Device_USBTask+0x1a>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    1388:	c9 cf       	rjmp	.-110    	; 0x131c <CDC_Device_Flush>
    138a:	08 95       	ret

0000138c <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    138c:	2e b3       	in	r18, 0x1e	; 30
    138e:	24 30       	cpi	r18, 0x04	; 4
    1390:	09 f0       	breq	.+2      	; 0x1394 <CDC_Device_BytesReceived+0x8>
    1392:	1a c0       	rjmp	.+52     	; 0x13c8 <CDC_Device_BytesReceived+0x3c>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1394:	fc 01       	movw	r30, r24
    1396:	44 89       	ldd	r20, Z+20	; 0x14
    1398:	55 89       	ldd	r21, Z+21	; 0x15
    139a:	66 89       	ldd	r22, Z+22	; 0x16
    139c:	77 89       	ldd	r23, Z+23	; 0x17
    139e:	45 2b       	or	r20, r21
    13a0:	46 2b       	or	r20, r22
    13a2:	47 2b       	or	r20, r23
    13a4:	89 f0       	breq	.+34     	; 0x13c8 <CDC_Device_BytesReceived+0x3c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13a6:	86 81       	ldd	r24, Z+6	; 0x06
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13ae:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    13b2:	82 ff       	sbrs	r24, 2
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <CDC_Device_BytesReceived+0x3c>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    13b6:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
    13ba:	81 11       	cpse	r24, r1
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <CDC_Device_BytesReceived+0x42>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13be:	80 91 e8 00 	lds	r24, 0x00E8
    13c2:	8b 77       	andi	r24, 0x7B	; 123
    13c4:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearOUT();
			return 0;
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <CDC_Device_BytesReceived+0x48>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    13ce:	20 91 f2 00 	lds	r18, 0x00F2
    13d2:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    13d4:	c9 01       	movw	r24, r18
    13d6:	08 95       	ret

000013d8 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13d8:	2e b3       	in	r18, 0x1e	; 30
    13da:	24 30       	cpi	r18, 0x04	; 4
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <CDC_Device_ReceiveByte+0xc>
	  return -1;
    13de:	2f ef       	ldi	r18, 0xFF	; 255
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	24 c0       	rjmp	.+72     	; 0x142c <CDC_Device_ReceiveByte+0x54>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13e4:	fc 01       	movw	r30, r24
    13e6:	44 89       	ldd	r20, Z+20	; 0x14
    13e8:	55 89       	ldd	r21, Z+21	; 0x15
    13ea:	66 89       	ldd	r22, Z+22	; 0x16
    13ec:	77 89       	ldd	r23, Z+23	; 0x17
    13ee:	45 2b       	or	r20, r21
    13f0:	46 2b       	or	r20, r22
    13f2:	47 2b       	or	r20, r23
    13f4:	a1 f3       	breq	.-24     	; 0x13de <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f6:	86 81       	ldd	r24, Z+6	; 0x06
    13f8:	8f 70       	andi	r24, 0x0F	; 15
    13fa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13fe:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1402:	82 ff       	sbrs	r24, 2
    1404:	ec cf       	rjmp	.-40     	; 0x13de <CDC_Device_ReceiveByte+0x6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1406:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    140a:	88 23       	and	r24, r24
    140c:	21 f0       	breq	.+8      	; 0x1416 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    140e:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1416:	2f ef       	ldi	r18, 0xFF	; 255
    1418:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    141a:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    141e:	81 11       	cpse	r24, r1
    1420:	05 c0       	rjmp	.+10     	; 0x142c <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1422:	80 91 e8 00 	lds	r24, 0x00E8
    1426:	8b 77       	andi	r24, 0x7B	; 123
    1428:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    142c:	c9 01       	movw	r24, r18
    142e:	08 95       	ret

00001430 <CDC_Device_Event_Stub>:
}
#endif

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{
    1430:	08 95       	ret

00001432 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    143c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1440:	83 ff       	sbrs	r24, 3
    1442:	af c0       	rjmp	.+350    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1444:	88 81       	ld	r24, Y
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	20 91 a7 02 	lds	r18, 0x02A7
    144c:	30 91 a8 02 	lds	r19, 0x02A8
    1450:	28 17       	cp	r18, r24
    1452:	39 07       	cpc	r19, r25
    1454:	09 f0       	breq	.+2      	; 0x1458 <CDC_Device_ProcessControlRequest+0x26>
    1456:	a5 c0       	rjmp	.+330    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
	  return;

	switch (USB_ControlRequest.bRequest)
    1458:	80 91 a4 02 	lds	r24, 0x02A4
    145c:	81 32       	cpi	r24, 0x21	; 33
    145e:	61 f0       	breq	.+24     	; 0x1478 <CDC_Device_ProcessControlRequest+0x46>
    1460:	20 f4       	brcc	.+8      	; 0x146a <CDC_Device_ProcessControlRequest+0x38>
    1462:	80 32       	cpi	r24, 0x20	; 32
    1464:	09 f0       	breq	.+2      	; 0x1468 <CDC_Device_ProcessControlRequest+0x36>
    1466:	9d c0       	rjmp	.+314    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <CDC_Device_ProcessControlRequest+0xb6>
    146a:	82 32       	cpi	r24, 0x22	; 34
    146c:	09 f4       	brne	.+2      	; 0x1470 <CDC_Device_ProcessControlRequest+0x3e>
    146e:	71 c0       	rjmp	.+226    	; 0x1552 <CDC_Device_ProcessControlRequest+0x120>
    1470:	83 32       	cpi	r24, 0x23	; 35
    1472:	09 f0       	breq	.+2      	; 0x1476 <CDC_Device_ProcessControlRequest+0x44>
    1474:	96 c0       	rjmp	.+300    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
    1476:	83 c0       	rjmp	.+262    	; 0x157e <CDC_Device_ProcessControlRequest+0x14c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1478:	80 91 a3 02 	lds	r24, 0x02A3
    147c:	81 3a       	cpi	r24, 0xA1	; 161
    147e:	09 f0       	breq	.+2      	; 0x1482 <CDC_Device_ProcessControlRequest+0x50>
    1480:	90 c0       	rjmp	.+288    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1482:	80 91 e8 00 	lds	r24, 0x00E8
    1486:	87 7f       	andi	r24, 0xF7	; 247
    1488:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    148c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1490:	80 ff       	sbrs	r24, 0
    1492:	fc cf       	rjmp	.-8      	; 0x148c <CDC_Device_ProcessControlRequest+0x5a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1494:	4c 89       	ldd	r20, Y+20	; 0x14
    1496:	5d 89       	ldd	r21, Y+21	; 0x15
    1498:	6e 89       	ldd	r22, Y+22	; 0x16
    149a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    149c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    14a0:	05 2f       	mov	r16, r21
    14a2:	16 2f       	mov	r17, r22
    14a4:	27 2f       	mov	r18, r23
    14a6:	33 27       	eor	r19, r19
    14a8:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 16);
    14ac:	8b 01       	movw	r16, r22
    14ae:	22 27       	eor	r18, r18
    14b0:	33 27       	eor	r19, r19
    14b2:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 24);
    14b6:	47 2f       	mov	r20, r23
    14b8:	55 27       	eor	r21, r21
    14ba:	66 27       	eor	r22, r22
    14bc:	77 27       	eor	r23, r23
    14be:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    14c2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14c4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    14c8:	89 8d       	ldd	r24, Y+25	; 0x19
    14ca:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    14ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14d0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14d4:	80 91 e8 00 	lds	r24, 0x00E8
    14d8:	8e 77       	andi	r24, 0x7E	; 126
    14da:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    14e6:	12 cb       	rjmp	.-2524   	; 0xb0c <Endpoint_ClearStatusStage>
    14e8:	80 91 a3 02 	lds	r24, 0x02A3
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14ec:	81 32       	cpi	r24, 0x21	; 33
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <CDC_Device_ProcessControlRequest+0xc0>
    14f0:	58 c0       	rjmp	.+176    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
    14f2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f6:	87 7f       	andi	r24, 0xF7	; 247
    14f8:	80 93 e8 00 	sts	0x00E8, r24
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <CDC_Device_ProcessControlRequest+0xd4>
    14fe:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <CDC_Device_ProcessControlRequest+0xd4>
    1504:	4e c0       	rjmp	.+156    	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
    1506:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    150a:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    150c:	f8 cf       	rjmp	.-16     	; 0x14fe <CDC_Device_ProcessControlRequest+0xcc>
    150e:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1512:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1516:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    151a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    151e:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1520:	2d 8b       	std	Y+21, r18	; 0x15
    1522:	9e 8b       	std	Y+22, r25	; 0x16
    1524:	8f 8b       	std	Y+23, r24	; 0x17
    1526:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    152a:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    152c:	80 91 f1 00 	lds	r24, 0x00F1
    1530:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1532:	80 91 f1 00 	lds	r24, 0x00F1
    1536:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1538:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    153c:	8b 77       	andi	r24, 0x7B	; 123
    153e:	80 93 e8 00 	sts	0x00E8, r24
    1542:	e4 da       	rcall	.-2616   	; 0xb0c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1544:	ce 01       	movw	r24, r28
    1546:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1548:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <EVENT_CDC_Device_LineEncodingChanged>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1552:	80 91 a3 02 	lds	r24, 0x02A3
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1556:	81 32       	cpi	r24, 0x21	; 33
    1558:	21 f5       	brne	.+72     	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
    155a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    155e:	87 7f       	andi	r24, 0xF7	; 247
    1560:	80 93 e8 00 	sts	0x00E8, r24
    1564:	d3 da       	rcall	.-2650   	; 0xb0c <Endpoint_ClearStatusStage>
    1566:	80 91 a5 02 	lds	r24, 0x02A5
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    156a:	90 91 a6 02 	lds	r25, 0x02A6

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    156e:	99 8b       	std	Y+17, r25	; 0x11
    1570:	88 8b       	std	Y+16, r24	; 0x10
    1572:	ce 01       	movw	r24, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1578:	1f 91       	pop	r17
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    157a:	0f 91       	pop	r16
    157c:	59 cf       	rjmp	.-334    	; 0x1430 <CDC_Device_Event_Stub>
    157e:	80 91 a3 02 	lds	r24, 0x02A3
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1582:	81 32       	cpi	r24, 0x21	; 33
    1584:	71 f4       	brne	.+28     	; 0x15a2 <CDC_Device_ProcessControlRequest+0x170>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1586:	80 91 e8 00 	lds	r24, 0x00E8
    158a:	87 7f       	andi	r24, 0xF7	; 247
    158c:	80 93 e8 00 	sts	0x00E8, r24
    1590:	bd da       	rcall	.-2694   	; 0xb0c <Endpoint_ClearStatusStage>
    1592:	60 91 a5 02 	lds	r22, 0x02A5
    1596:	ce 01       	movw	r24, r28
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	47 cf       	rjmp	.-370    	; 0x1430 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    15aa:	08 95       	ret

000015ac <__udivmodsi4>:
    15ac:	a1 e2       	ldi	r26, 0x21	; 33
			}

			break;
	}
}
    15ae:	1a 2e       	mov	r1, r26
    15b0:	aa 1b       	sub	r26, r26
    15b2:	bb 1b       	sub	r27, r27
    15b4:	fd 01       	movw	r30, r26
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <__udivmodsi4_ep>

000015b8 <__udivmodsi4_loop>:
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	ee 1f       	adc	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	a2 17       	cp	r26, r18
    15c2:	b3 07       	cpc	r27, r19
    15c4:	e4 07       	cpc	r30, r20
    15c6:	f5 07       	cpc	r31, r21
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__udivmodsi4_ep>
    15ca:	a2 1b       	sub	r26, r18
    15cc:	b3 0b       	sbc	r27, r19
    15ce:	e4 0b       	sbc	r30, r20
    15d0:	f5 0b       	sbc	r31, r21

000015d2 <__udivmodsi4_ep>:
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	1a 94       	dec	r1
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <__udivmodsi4_loop>
    15de:	60 95       	com	r22
    15e0:	70 95       	com	r23
    15e2:	80 95       	com	r24
    15e4:	90 95       	com	r25
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	bd 01       	movw	r22, r26
    15ec:	cf 01       	movw	r24, r30
    15ee:	08 95       	ret

000015f0 <_exit>:
    15f0:	f8 94       	cli

000015f2 <__stop_program>:
    15f2:	ff cf       	rjmp	.-2      	; 0x15f2 <__stop_program>
