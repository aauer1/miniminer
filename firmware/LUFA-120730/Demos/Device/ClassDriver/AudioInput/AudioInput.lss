
AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001036  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800112  00800112  000010dc  2**0
                  ALLOC
  3 .stab         00000b7c  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000019e  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000960  00000000  00000000  00001df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000017a4  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011115  00000000  00000000  00003efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000383f  00000000  00000000  0001500f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000205c7  00000000  00000000  0001884e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f40  00000000  00000000  00038e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006464  00000000  00000000  00039d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008db4  00000000  00000000  000401bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 002178a2  00000000  00000000  00048f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000027b9  00000000  00000000  00260812  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00262fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	ca c0       	rjmp	.+404    	; 0x19a <__bad_interrupt>
       6:	00 00       	nop
       8:	c8 c0       	rjmp	.+400    	; 0x19a <__bad_interrupt>
       a:	00 00       	nop
       c:	c6 c0       	rjmp	.+396    	; 0x19a <__bad_interrupt>
       e:	00 00       	nop
      10:	c4 c0       	rjmp	.+392    	; 0x19a <__bad_interrupt>
      12:	00 00       	nop
      14:	c2 c0       	rjmp	.+388    	; 0x19a <__bad_interrupt>
      16:	00 00       	nop
      18:	c0 c0       	rjmp	.+384    	; 0x19a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	be c0       	rjmp	.+380    	; 0x19a <__bad_interrupt>
      1e:	00 00       	nop
      20:	bc c0       	rjmp	.+376    	; 0x19a <__bad_interrupt>
      22:	00 00       	nop
      24:	ba c0       	rjmp	.+372    	; 0x19a <__bad_interrupt>
      26:	00 00       	nop
      28:	04 c3       	rjmp	.+1544   	; 0x632 <__vector_10>
      2a:	00 00       	nop
      2c:	b6 c0       	rjmp	.+364    	; 0x19a <__bad_interrupt>
      2e:	00 00       	nop
      30:	b4 c0       	rjmp	.+360    	; 0x19a <__bad_interrupt>
      32:	00 00       	nop
      34:	b2 c0       	rjmp	.+356    	; 0x19a <__bad_interrupt>
      36:	00 00       	nop
      38:	b0 c0       	rjmp	.+352    	; 0x19a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ae c0       	rjmp	.+348    	; 0x19a <__bad_interrupt>
      3e:	00 00       	nop
      40:	ac c0       	rjmp	.+344    	; 0x19a <__bad_interrupt>
      42:	00 00       	nop
      44:	aa c0       	rjmp	.+340    	; 0x19a <__bad_interrupt>
      46:	00 00       	nop
      48:	a8 c0       	rjmp	.+336    	; 0x19a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a6 c0       	rjmp	.+332    	; 0x19a <__bad_interrupt>
      4e:	00 00       	nop
      50:	a4 c0       	rjmp	.+328    	; 0x19a <__bad_interrupt>
      52:	00 00       	nop
      54:	e0 c0       	rjmp	.+448    	; 0x216 <__vector_21>
      56:	00 00       	nop
      58:	a0 c0       	rjmp	.+320    	; 0x19a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9e c0       	rjmp	.+316    	; 0x19a <__bad_interrupt>
      5e:	00 00       	nop
      60:	9c c0       	rjmp	.+312    	; 0x19a <__bad_interrupt>
      62:	00 00       	nop
      64:	9a c0       	rjmp	.+308    	; 0x19a <__bad_interrupt>
      66:	00 00       	nop
      68:	98 c0       	rjmp	.+304    	; 0x19a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	96 c0       	rjmp	.+300    	; 0x19a <__bad_interrupt>
      6e:	00 00       	nop
      70:	94 c0       	rjmp	.+296    	; 0x19a <__bad_interrupt>
      72:	00 00       	nop
      74:	92 c0       	rjmp	.+292    	; 0x19a <__bad_interrupt>
      76:	00 00       	nop
      78:	90 c0       	rjmp	.+288    	; 0x19a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8e c0       	rjmp	.+284    	; 0x19a <__bad_interrupt>
      7e:	00 00       	nop
      80:	8c c0       	rjmp	.+280    	; 0x19a <__bad_interrupt>
      82:	00 00       	nop
      84:	8a c0       	rjmp	.+276    	; 0x19a <__bad_interrupt>
      86:	00 00       	nop
      88:	88 c0       	rjmp	.+272    	; 0x19a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	86 c0       	rjmp	.+268    	; 0x19a <__bad_interrupt>
      8e:	00 00       	nop
      90:	84 c0       	rjmp	.+264    	; 0x19a <__bad_interrupt>
      92:	00 00       	nop
      94:	82 c0       	rjmp	.+260    	; 0x19a <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 00 02 00 00 00 08 eb 03 47 20 01 00 01 02     ..........G ....
      a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
      ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
      ca:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
      da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
      ea:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
      fa:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     10a:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000011a <LanguageString>:
     11a:	04 03 09 04                                         ....

0000011e <ManufacturerString>:
     11e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     12e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000138 <ProductString>:
     138:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.
     148:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.
     158:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d0 e2       	ldi	r29, 0x20	; 32
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	e6 e3       	ldi	r30, 0x36	; 54
     174:	f0 e1       	ldi	r31, 0x10	; 16
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	0b bf       	out	0x3b, r16	; 59
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
     17c:	07 90       	elpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a2 31       	cpi	r26, 0x12	; 18
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_clear_bss>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a2 e1       	ldi	r26, 0x12	; 18
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a2 32       	cpi	r26, 0x22	; 34
     192:	b1 07       	cpc	r27, r17
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
     196:	39 d0       	rcall	.+114    	; 0x20a <main>
     198:	4c c7       	rjmp	.+3736   	; 0x1032 <_exit>

0000019a <__bad_interrupt>:
     19a:	32 cf       	rjmp	.-412    	; 0x0 <__vectors>

0000019c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     19c:	9b b1       	in	r25, 0x0b	; 11
     19e:	9f 70       	andi	r25, 0x0F	; 15
     1a0:	98 2b       	or	r25, r24
     1a2:	9b b9       	out	0x0b, r25	; 11
			}
     1a4:	08 95       	ret

000001a6 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1aa:	84 b7       	in	r24, 0x34	; 52
     1ac:	87 7f       	andi	r24, 0xF7	; 247
     1ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1b0:	88 e1       	ldi	r24, 0x18	; 24
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	80 93 60 00 	sts	0x0060, r24
     1ba:	10 92 60 00 	sts	0x0060, r1
     1be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	80 e8       	ldi	r24, 0x80	; 128
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	80 93 61 00 	sts	0x0061, r24
     1cc:	90 93 61 00 	sts	0x0061, r25
     1d0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1d2:	8a b1       	in	r24, 0x0a	; 10
     1d4:	80 6f       	ori	r24, 0xF0	; 240
     1d6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d8:	8b b1       	in	r24, 0x0b	; 11
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1de:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     1e0:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     1e2:	ca e7       	ldi	r28, 0x7A	; 122
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	85 ea       	ldi	r24, 0xA5	; 165
     1e8:	88 83       	st	Y, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     1ea:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     1ec:	ee e7       	ldi	r30, 0x7E	; 126
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	84 60       	ori	r24, 0x04	; 4
     1f4:	80 83       	st	Z, r24
	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     1f6:	07 d2       	rcall	.+1038   	; 0x606 <USB_Init>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     1f8:	82 e4       	ldi	r24, 0x42	; 66
     1fa:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     1fe:	88 81       	ld	r24, Y
     200:	80 64       	ori	r24, 0x40	; 64
     202:	88 83       	st	Y, r24

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     20a:	cd df       	rcall	.-102    	; 0x1a6 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     20c:	80 e1       	ldi	r24, 0x10	; 16
     20e:	c6 df       	rcall	.-116    	; 0x19c <LEDs_SetAllLEDs>
	sei();
     210:	78 94       	sei

	for (;;)
	{
		Audio_Device_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
     212:	3b d5       	rcall	.+2678   	; 0xc8a <USB_USBTask>
     214:	fe cf       	rjmp	.-4      	; 0x212 <main+0x8>

00000216 <__vector_21>:
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));
}

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	4f 93       	push	r20
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     22a:	80 91 e9 00 	lds	r24, 0x00E9
     22e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     230:	90 91 ec 00 	lds	r25, 0x00EC
     234:	90 ff       	sbrs	r25, 0
     236:	02 c0       	rjmp	.+4      	; 0x23c <__vector_21+0x26>
     238:	90 e8       	ldi	r25, 0x80	; 128
     23a:	01 c0       	rjmp	.+2      	; 0x23e <__vector_21+0x28>
     23c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     23e:	49 2f       	mov	r20, r25
     240:	48 2b       	or	r20, r24
			 */
			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			                                                     ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			{
				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnabled))
     242:	80 91 19 01 	lds	r24, 0x0119
     246:	84 30       	cpi	r24, 0x04	; 4
     248:	e9 f5       	brne	.+122    	; 0x2c4 <__vector_21+0xae>
     24a:	80 91 0c 01 	lds	r24, 0x010C
     24e:	88 23       	and	r24, r24
     250:	c9 f1       	breq	.+114    	; 0x2c4 <__vector_21+0xae>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     252:	80 91 02 01 	lds	r24, 0x0102
     256:	8f 70       	andi	r24, 0x0F	; 15
     258:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     25c:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	/* Check that the USB bus is ready for the next sample to write */
	if (Audio_Device_IsReadyForNextSample(&Microphone_Audio_Interface))
     260:	80 ff       	sbrs	r24, 0
     262:	30 c0       	rjmp	.+96     	; 0x2c4 <__vector_21+0xae>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     264:	90 91 14 01 	lds	r25, 0x0114
     268:	89 2f       	mov	r24, r25
     26a:	8f 5f       	subi	r24, 0xFF	; 255
     26c:	80 93 14 01 	sts	0x0114, r24
     270:	9f 3f       	cpi	r25, 0xFF	; 255
     272:	51 f4       	brne	.+20     	; 0x288 <__vector_21+0x72>
			  CurrentWaveValue ^= 0x8000;
     274:	80 91 12 01 	lds	r24, 0x0112
     278:	90 91 13 01 	lds	r25, 0x0113
     27c:	80 50       	subi	r24, 0x00	; 0
     27e:	90 48       	sbci	r25, 0x80	; 128
     280:	90 93 13 01 	sts	0x0113, r25
     284:	80 93 12 01 	sts	0x0112, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     288:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     28a:	82 fd       	sbrc	r24, 2
     28c:	05 c0       	rjmp	.+10     	; 0x298 <__vector_21+0x82>
     28e:	80 91 12 01 	lds	r24, 0x0112
     292:	90 91 13 01 	lds	r25, 0x0113
     296:	02 c0       	rjmp	.+4      	; 0x29c <__vector_21+0x86>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     29c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     2a0:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     2a4:	20 91 f2 00 	lds	r18, 0x00F2
     2a8:	30 91 f3 00 	lds	r19, 0x00F3
			static inline void Audio_Device_WriteSample16(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo,
			                                              const int16_t Sample)
			{
				Endpoint_Write_16_LE(Sample);

				if (Endpoint_BytesInEndpoint() == AudioInterfaceInfo->Config.DataINEndpoint.Size)
     2ac:	80 91 03 01 	lds	r24, 0x0103
     2b0:	90 91 04 01 	lds	r25, 0x0104
     2b4:	28 17       	cp	r18, r24
     2b6:	39 07       	cpc	r19, r25
     2b8:	29 f4       	brne	.+10     	; 0x2c4 <__vector_21+0xae>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2ba:	80 91 e8 00 	lds	r24, 0x00E8
     2be:	8e 77       	andi	r24, 0x7E	; 126
     2c0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2c4:	84 2f       	mov	r24, r20
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	80 93 e9 00 	sts	0x00E9, r24

		Audio_Device_WriteSample16(&Microphone_Audio_Interface, AudioSample);
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     2cc:	9f 91       	pop	r25
     2ce:	8f 91       	pop	r24
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     2e0:	1f 93       	push	r17
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2e2:	80 ea       	ldi	r24, 0xA0	; 160
     2e4:	5b df       	rcall	.-330    	; 0x19c <LEDs_SetAllLEDs>

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     2e6:	12 e0       	ldi	r17, 0x02	; 2
     2e8:	10 93 6e 00 	sts	0x006E, r17
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     2ec:	20 91 0d 01 	lds	r18, 0x010D
     2f0:	30 91 0e 01 	lds	r19, 0x010E
     2f4:	40 91 0f 01 	lds	r20, 0x010F
     2f8:	50 91 10 01 	lds	r21, 0x0110
     2fc:	60 e4       	ldi	r22, 0x40	; 64
     2fe:	72 e4       	ldi	r23, 0x42	; 66
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	74 d6       	rcall	.+3304   	; 0xfee <__udivmodsi4>
     306:	21 50       	subi	r18, 0x01	; 1
     308:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     30a:	14 bd       	out	0x24, r17	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     30c:	15 bd       	out	0x25, r17	; 37
}
     30e:	1f 91       	pop	r17
     310:	08 95       	ret

00000312 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the sample reload timer */
	TCCR0B = 0;
     312:	15 bc       	out	0x25, r1	; 37

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     314:	80 e1       	ldi	r24, 0x10	; 16
}
     316:	42 cf       	rjmp	.-380    	; 0x19c <LEDs_SetAllLEDs>

00000318 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= Audio_Device_ConfigureEndpoints(&Microphone_Audio_Interface);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	51 d6       	rcall	.+3234   	; 0xfc0 <Audio_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     31e:	80 ff       	sbrs	r24, 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <EVENT_USB_Device_ConfigurationChanged+0xe>
     322:	80 e6       	ldi	r24, 0x60	; 96
     324:	01 c0       	rjmp	.+2      	; 0x328 <EVENT_USB_Device_ConfigurationChanged+0x10>
     326:	80 e9       	ldi	r24, 0x90	; 144
}
     328:	39 cf       	rjmp	.-398    	; 0x19c <LEDs_SetAllLEDs>

0000032a <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	Audio_Device_ProcessControlRequest(&Microphone_Audio_Interface);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	91 e0       	ldi	r25, 0x01	; 1
}
     32e:	c9 c4       	rjmp	.+2450   	; 0xcc2 <Audio_Device_ProcessControlRequest>

00000330 <CALLBACK_Audio_Device_GetSetEndpointProperty>:
                                                  const uint8_t EndpointProperty,
                                                  const uint8_t EndpointAddress,
                                                  const uint8_t EndpointControl,
                                                  uint16_t* const DataLength,
                                                  uint8_t* Data)
{
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	d8 01       	movw	r26, r16
     33a:	f7 01       	movw	r30, r14
	/* Check the requested endpoint to see if a supported endpoint is being manipulated */
	if (EndpointAddress == Microphone_Audio_Interface.Config.DataINEndpoint.Address)
     33c:	80 91 02 01 	lds	r24, 0x0102
     340:	48 17       	cp	r20, r24
     342:	09 f0       	breq	.+2      	; 0x346 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x16>
     344:	48 c0       	rjmp	.+144    	; 0x3d6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xa6>
	{
		/* Check the requested control to see if a supported control is being manipulated */
		if (EndpointControl == AUDIO_EPCONTROL_SamplingFreq)
     346:	21 30       	cpi	r18, 0x01	; 1
     348:	09 f0       	breq	.+2      	; 0x34c <CALLBACK_Audio_Device_GetSetEndpointProperty+0x1c>
     34a:	45 c0       	rjmp	.+138    	; 0x3d6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xa6>
		{
			switch (EndpointProperty)
     34c:	61 30       	cpi	r22, 0x01	; 1
     34e:	21 f0       	breq	.+8      	; 0x358 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x28>
     350:	61 38       	cpi	r22, 0x81	; 129
     352:	09 f0       	breq	.+2      	; 0x356 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x26>
     354:	40 c0       	rjmp	.+128    	; 0x3d6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xa6>
     356:	2e c0       	rjmp	.+92     	; 0x3b4 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x84>
			{
				case AUDIO_REQ_SetCurrent:
					/* Check if we are just testing for a valid property, or actually adjusting it */
					if (DataLength != NULL)
     358:	10 97       	sbiw	r26, 0x00	; 0
     35a:	09 f4       	brne	.+2      	; 0x35e <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2e>
     35c:	3e c0       	rjmp	.+124    	; 0x3da <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
					{
						/* Set the new sampling frequency to the value given by the host */
						CurrentAudioSampleFrequency = (((uint32_t)Data[2] << 16) | ((uint32_t)Data[1] << 8) | (uint32_t)Data[0]);
     35e:	22 81       	ldd	r18, Z+2	; 0x02
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	33 27       	eor	r19, r19
     36a:	22 27       	eor	r18, r18
     36c:	81 81       	ldd	r24, Z+1	; 0x01
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	a0 e0       	ldi	r26, 0x00	; 0
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	ba 2f       	mov	r27, r26
     376:	a9 2f       	mov	r26, r25
     378:	98 2f       	mov	r25, r24
     37a:	88 27       	eor	r24, r24
     37c:	28 2b       	or	r18, r24
     37e:	39 2b       	or	r19, r25
     380:	4a 2b       	or	r20, r26
     382:	5b 2b       	or	r21, r27
     384:	80 81       	ld	r24, Z
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a0 e0       	ldi	r26, 0x00	; 0
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	28 2b       	or	r18, r24
     38e:	39 2b       	or	r19, r25
     390:	4a 2b       	or	r20, r26
     392:	5b 2b       	or	r21, r27
     394:	20 93 0d 01 	sts	0x010D, r18
     398:	30 93 0e 01 	sts	0x010E, r19
     39c:	40 93 0f 01 	sts	0x010F, r20
     3a0:	50 93 10 01 	sts	0x0110, r21

						/* Adjust sample reload timer to the new frequency */
						OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     3a4:	60 e4       	ldi	r22, 0x40	; 64
     3a6:	72 e4       	ldi	r23, 0x42	; 66
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	20 d6       	rcall	.+3136   	; 0xfee <__udivmodsi4>
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	27 bd       	out	0x27, r18	; 39
     3b2:	13 c0       	rjmp	.+38     	; 0x3da <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
					}

					return true;
				case AUDIO_REQ_GetCurrent:
					/* Check if we are just testing for a valid property, or actually reading it */
					if (DataLength != NULL)
     3b4:	10 97       	sbiw	r26, 0x00	; 0
     3b6:	89 f0       	breq	.+34     	; 0x3da <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
					{
						*DataLength = 3;
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	9c 93       	st	X, r25
     3c0:	8e 93       	st	-X, r24

						Data[2] = (CurrentAudioSampleFrequency >> 16);
     3c2:	80 91 0d 01 	lds	r24, 0x010D
     3c6:	90 91 0e 01 	lds	r25, 0x010E
     3ca:	20 91 0f 01 	lds	r18, 0x010F
     3ce:	22 83       	std	Z+2, r18	; 0x02
						Data[1] = (CurrentAudioSampleFrequency >> 8);
     3d0:	91 83       	std	Z+1, r25	; 0x01
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);
     3d2:	80 83       	st	Z, r24
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
					return true;
			}
		}
	}

	return false;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <CALLBACK_Audio_Device_GetSetEndpointProperty+0xac>
						Data[2] = (CurrentAudioSampleFrequency >> 16);
						Data[1] = (CurrentAudioSampleFrequency >> 8);
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);
					}

					return true;
     3da:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return false;
}
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	08 95       	ret

000003e6 <CALLBACK_Audio_Device_GetSetInterfaceProperty>:
                                                   uint16_t* const DataLength,
                                                   uint8_t* Data) 
{
	/* No audio interface entities in the device descriptor, thus no properties to get or set. */
	return false;
}
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret

000003ea <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ea:	92 30       	cpi	r25, 0x02	; 2
     3ec:	29 f0       	breq	.+10     	; 0x3f8 <CALLBACK_USB_GetDescriptor+0xe>
     3ee:	93 30       	cpi	r25, 0x03	; 3
     3f0:	41 f0       	breq	.+16     	; 0x402 <CALLBACK_USB_GetDescriptor+0x18>
     3f2:	91 30       	cpi	r25, 0x01	; 1
     3f4:	e9 f4       	brne	.+58     	; 0x430 <CALLBACK_USB_GetDescriptor+0x46>
     3f6:	17 c0       	rjmp	.+46     	; 0x426 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3f8:	20 e7       	ldi	r18, 0x70	; 112
     3fa:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3fc:	ea ea       	ldi	r30, 0xAA	; 170
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     400:	1b c0       	rjmp	.+54     	; 0x438 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	41 f0       	breq	.+16     	; 0x416 <CALLBACK_USB_GetDescriptor+0x2c>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	18 f0       	brcs	.+6      	; 0x410 <CALLBACK_USB_GetDescriptor+0x26>
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	89 f4       	brne	.+34     	; 0x430 <CALLBACK_USB_GetDescriptor+0x46>
     40e:	06 c0       	rjmp	.+12     	; 0x41c <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     410:	ea e1       	ldi	r30, 0x1A	; 26
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	05 c0       	rjmp	.+10     	; 0x420 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     416:	ee e1       	ldi	r30, 0x1E	; 30
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	02 c0       	rjmp	.+4      	; 0x420 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     41c:	e8 e3       	ldi	r30, 0x38	; 56
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	24 91       	lpm	r18, Z+
     422:	30 e0       	ldi	r19, 0x00	; 0
					break;
     424:	09 c0       	rjmp	.+18     	; 0x438 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     426:	22 e1       	ldi	r18, 0x12	; 18
     428:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     42a:	e8 e9       	ldi	r30, 0x98	; 152
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	04 c0       	rjmp	.+8      	; 0x438 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     434:	e0 e0       	ldi	r30, 0x00	; 0
     436:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     438:	da 01       	movw	r26, r20
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	fc 93       	st	X, r31
     43e:	ee 93       	st	-X, r30
	return Size;
}
     440:	c9 01       	movw	r24, r18
     442:	08 95       	ret

00000444 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     444:	98 2f       	mov	r25, r24
     446:	2c c0       	rjmp	.+88     	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     448:	29 2f       	mov	r18, r25
     44a:	2f 70       	andi	r18, 0x0F	; 15
     44c:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     450:	98 17       	cp	r25, r24
     452:	39 f0       	breq	.+14     	; 0x462 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     454:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     458:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     45c:	50 91 f0 00 	lds	r21, 0x00F0
     460:	03 c0       	rjmp	.+6      	; 0x468 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     462:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     464:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     466:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     468:	21 ff       	sbrs	r18, 1
     46a:	19 c0       	rjmp	.+50     	; 0x49e <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     46c:	30 91 eb 00 	lds	r19, 0x00EB
     470:	3e 7f       	andi	r19, 0xFE	; 254
     472:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     476:	30 91 ed 00 	lds	r19, 0x00ED
     47a:	3d 7f       	andi	r19, 0xFD	; 253
     47c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     480:	30 91 eb 00 	lds	r19, 0x00EB
     484:	31 60       	ori	r19, 0x01	; 1
     486:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     48a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     48e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     492:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     496:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     49a:	27 ff       	sbrs	r18, 7
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     49e:	9f 5f       	subi	r25, 0xFF	; 255
     4a0:	97 30       	cpi	r25, 0x07	; 7
     4a2:	90 f2       	brcs	.-92     	; 0x448 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     4b0:	08 95       	ret

000004b2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     4c0:	e8 2e       	mov	r14, r24
     4c2:	e7 01       	movw	r28, r14
     4c4:	7e 01       	movw	r14, r28
     4c6:	f9 2e       	mov	r15, r25
     4c8:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     4ca:	00 e0       	ldi	r16, 0x00	; 0
     4cc:	2a c0       	rjmp	.+84     	; 0x522 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     4ce:	98 81       	ld	r25, Y
     4d0:	99 23       	and	r25, r25
     4d2:	29 f1       	breq	.+74     	; 0x51e <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     4d4:	6b 81       	ldd	r22, Y+3	; 0x03
     4d6:	e9 81       	ldd	r30, Y+1	; 0x01
     4d8:	fa 81       	ldd	r31, Y+2	; 0x02
     4da:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     4dc:	89 2f       	mov	r24, r25
     4de:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     4e0:	87 30       	cpi	r24, 0x07	; 7
     4e2:	18 f5       	brcc	.+70     	; 0x52a <Endpoint_ConfigureEndpointTable+0x78>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     4e4:	62 95       	swap	r22
     4e6:	66 0f       	add	r22, r22
     4e8:	66 0f       	add	r22, r22
     4ea:	60 7c       	andi	r22, 0xC0	; 192
     4ec:	99 1f       	adc	r25, r25
     4ee:	99 27       	eor	r25, r25
     4f0:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     4f2:	69 2b       	or	r22, r25
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	10 f0       	brcs	.+4      	; 0x4fc <Endpoint_ConfigureEndpointTable+0x4a>
     4f8:	96 e0       	ldi	r25, 0x06	; 6
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <Endpoint_ConfigureEndpointTable+0x4c>
     4fc:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     4fe:	28 e0       	ldi	r18, 0x08	; 8
     500:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	03 c0       	rjmp	.+6      	; 0x50c <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     506:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     50c:	2e 17       	cp	r18, r30
     50e:	3f 07       	cpc	r19, r31
     510:	d0 f3       	brcs	.-12     	; 0x506 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     512:	42 95       	swap	r20
     514:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     516:	49 2b       	or	r20, r25
     518:	95 df       	rcall	.-214    	; 0x444 <Endpoint_ConfigureEndpoint_Prv>
     51a:	88 23       	and	r24, r24
     51c:	31 f0       	breq	.+12     	; 0x52a <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     51e:	0f 5f       	subi	r16, 0xFF	; 255
     520:	25 96       	adiw	r28, 0x05	; 5
     522:	01 17       	cp	r16, r17
     524:	a0 f2       	brcs	.-88     	; 0x4ce <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	01 c0       	rjmp	.+2      	; 0x52c <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     52a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     53a:	80 91 1a 01 	lds	r24, 0x011A
     53e:	87 ff       	sbrs	r24, 7
     540:	13 c0       	rjmp	.+38     	; 0x568 <Endpoint_ClearStatusStage+0x2e>
     542:	04 c0       	rjmp	.+8      	; 0x54c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     544:	80 91 19 01 	lds	r24, 0x0119
     548:	88 23       	and	r24, r24
     54a:	b9 f0       	breq	.+46     	; 0x57a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     54c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     550:	82 ff       	sbrs	r24, 2
     552:	f8 cf       	rjmp	.-16     	; 0x544 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     554:	80 91 e8 00 	lds	r24, 0x00E8
     558:	8b 77       	andi	r24, 0x7B	; 123
     55a:	80 93 e8 00 	sts	0x00E8, r24
     55e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     560:	80 91 19 01 	lds	r24, 0x0119
     564:	88 23       	and	r24, r24
     566:	49 f0       	breq	.+18     	; 0x57a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     568:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     56c:	80 ff       	sbrs	r24, 0
     56e:	f8 cf       	rjmp	.-16     	; 0x560 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     570:	80 91 e8 00 	lds	r24, 0x00E8
     574:	8e 77       	andi	r24, 0x7E	; 126
     576:	80 93 e8 00 	sts	0x00E8, r24
     57a:	08 95       	ret

0000057c <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     584:	49 d0       	rcall	.+146    	; 0x618 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     586:	50 d0       	rcall	.+160    	; 0x628 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     588:	c8 ed       	ldi	r28, 0xD8	; 216
     58a:	d0 e0       	ldi	r29, 0x00	; 0
     58c:	88 81       	ld	r24, Y
     58e:	8f 77       	andi	r24, 0x7F	; 127
     590:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     592:	88 81       	ld	r24, Y
     594:	80 68       	ori	r24, 0x80	; 128
     596:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     598:	88 81       	ld	r24, Y
     59a:	8f 7d       	andi	r24, 0xDF	; 223
     59c:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     59e:	e7 ed       	ldi	r30, 0xD7	; 215
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5a8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     5aa:	10 92 19 01 	sts	0x0119, r1
	USB_Device_ConfigurationNumber  = 0;
     5ae:	10 92 15 01 	sts	0x0115, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     5b2:	10 92 17 01 	sts	0x0117, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     5b6:	10 92 16 01 	sts	0x0116, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     5ba:	00 ee       	ldi	r16, 0xE0	; 224
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	f8 01       	movw	r30, r16
     5c0:	80 81       	ld	r24, Z
     5c2:	8b 7f       	andi	r24, 0xFB	; 251
     5c4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     5c6:	88 81       	ld	r24, Y
     5c8:	81 60       	ori	r24, 0x01	; 1
     5ca:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	42 e0       	ldi	r20, 0x02	; 2
     5d2:	38 df       	rcall	.-400    	; 0x444 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5d4:	e1 ee       	ldi	r30, 0xE1	; 225
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	8e 7f       	andi	r24, 0xFE	; 254
     5dc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5de:	e2 ee       	ldi	r30, 0xE2	; 226
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	81 60       	ori	r24, 0x01	; 1
     5e6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     5e8:	80 81       	ld	r24, Z
     5ea:	88 60       	ori	r24, 0x08	; 8
     5ec:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     5ee:	f8 01       	movw	r30, r16
     5f0:	80 81       	ld	r24, Z
     5f2:	8e 7f       	andi	r24, 0xFE	; 254
     5f4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     5f6:	88 81       	ld	r24, Y
     5f8:	80 61       	ori	r24, 0x10	; 16
     5fa:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     606:	e7 ed       	ldi	r30, 0xD7	; 215
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	81 60       	ori	r24, 0x01	; 1
     60e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 18 01 	sts	0x0118, r24

	USB_ResetInterface();
}
     616:	b2 cf       	rjmp	.-156    	; 0x57c <USB_ResetInterface>

00000618 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     618:	e8 ed       	ldi	r30, 0xD8	; 216
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	8c 7f       	andi	r24, 0xFC	; 252
     620:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     622:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     626:	08 95       	ret

00000628 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     628:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     62c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     630:	08 95       	ret

00000632 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	0b b6       	in	r0, 0x3b	; 59
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     658:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     65c:	82 ff       	sbrs	r24, 2
     65e:	0a c0       	rjmp	.+20     	; 0x674 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     660:	80 91 e2 00 	lds	r24, 0x00E2
     664:	82 ff       	sbrs	r24, 2
     666:	06 c0       	rjmp	.+12     	; 0x674 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     668:	80 91 e1 00 	lds	r24, 0x00E1
     66c:	8b 7f       	andi	r24, 0xFB	; 251
     66e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     672:	0a d3       	rcall	.+1556   	; 0xc88 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     674:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     678:	80 ff       	sbrs	r24, 0
     67a:	1d c0       	rjmp	.+58     	; 0x6b6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     67c:	80 91 d8 00 	lds	r24, 0x00D8
     680:	80 ff       	sbrs	r24, 0
     682:	19 c0       	rjmp	.+50     	; 0x6b6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     684:	80 91 da 00 	lds	r24, 0x00DA
     688:	8e 7f       	andi	r24, 0xFE	; 254
     68a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     68e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     692:	80 ff       	sbrs	r24, 0
     694:	0c c0       	rjmp	.+24     	; 0x6ae <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     69a:	8e e0       	ldi	r24, 0x0E	; 14
     69c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     69e:	09 b4       	in	r0, 0x29	; 41
     6a0:	00 fe       	sbrs	r0, 0
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 19 01 	sts	0x0119, r24
			EVENT_USB_Device_Connect();
     6aa:	1a de       	rcall	.-972    	; 0x2e0 <EVENT_USB_Device_Connect>
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6ae:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     6b0:	10 92 19 01 	sts	0x0119, r1
			EVENT_USB_Device_Disconnect();
     6b4:	2e de       	rcall	.-932    	; 0x312 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     6b6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     6ba:	80 ff       	sbrs	r24, 0
     6bc:	18 c0       	rjmp	.+48     	; 0x6ee <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     6be:	80 91 e2 00 	lds	r24, 0x00E2
     6c2:	80 ff       	sbrs	r24, 0
     6c4:	14 c0       	rjmp	.+40     	; 0x6ee <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     6c6:	80 91 e2 00 	lds	r24, 0x00E2
     6ca:	8e 7f       	andi	r24, 0xFE	; 254
     6cc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     6d0:	80 91 e2 00 	lds	r24, 0x00E2
     6d4:	80 61       	ori	r24, 0x10	; 16
     6d6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     6da:	80 91 d8 00 	lds	r24, 0x00D8
     6de:	80 62       	ori	r24, 0x20	; 32
     6e0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6e4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     6e6:	85 e0       	ldi	r24, 0x05	; 5
     6e8:	80 93 19 01 	sts	0x0119, r24
		EVENT_USB_Device_Suspend();
     6ec:	cd d2       	rcall	.+1434   	; 0xc88 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     6ee:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     6f2:	84 ff       	sbrs	r24, 4
     6f4:	2d c0       	rjmp	.+90     	; 0x750 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     6f6:	80 91 e2 00 	lds	r24, 0x00E2
     6fa:	84 ff       	sbrs	r24, 4
     6fc:	29 c0       	rjmp	.+82     	; 0x750 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     6fe:	8c e0       	ldi	r24, 0x0C	; 12
     700:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     702:	8e e0       	ldi	r24, 0x0E	; 14
     704:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     706:	09 b4       	in	r0, 0x29	; 41
     708:	00 fe       	sbrs	r0, 0
     70a:	fd cf       	rjmp	.-6      	; 0x706 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     70c:	80 91 d8 00 	lds	r24, 0x00D8
     710:	8f 7d       	andi	r24, 0xDF	; 223
     712:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     716:	80 91 e1 00 	lds	r24, 0x00E1
     71a:	8f 7e       	andi	r24, 0xEF	; 239
     71c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     720:	80 91 e2 00 	lds	r24, 0x00E2
     724:	8f 7e       	andi	r24, 0xEF	; 239
     726:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     72a:	80 91 e2 00 	lds	r24, 0x00E2
     72e:	81 60       	ori	r24, 0x01	; 1
     730:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     734:	80 91 15 01 	lds	r24, 0x0115
     738:	88 23       	and	r24, r24
     73a:	21 f4       	brne	.+8      	; 0x744 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     73c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     740:	87 ff       	sbrs	r24, 7
     742:	02 c0       	rjmp	.+4      	; 0x748 <__vector_10+0x116>
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	01 c0       	rjmp	.+2      	; 0x74a <__vector_10+0x118>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 19 01 	sts	0x0119, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     74e:	9c d2       	rcall	.+1336   	; 0xc88 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     750:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     754:	83 ff       	sbrs	r24, 3
     756:	22 c0       	rjmp	.+68     	; 0x79c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     758:	80 91 e2 00 	lds	r24, 0x00E2
     75c:	83 ff       	sbrs	r24, 3
     75e:	1e c0       	rjmp	.+60     	; 0x79c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     760:	80 91 e1 00 	lds	r24, 0x00E1
     764:	87 7f       	andi	r24, 0xF7	; 247
     766:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	80 93 19 01 	sts	0x0119, r24
		USB_Device_ConfigurationNumber = 0;
     770:	10 92 15 01 	sts	0x0115, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     774:	80 91 e1 00 	lds	r24, 0x00E1
     778:	8e 7f       	andi	r24, 0xFE	; 254
     77a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     77e:	80 91 e2 00 	lds	r24, 0x00E2
     782:	8e 7f       	andi	r24, 0xFE	; 254
     784:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     788:	80 91 e2 00 	lds	r24, 0x00E2
     78c:	80 61       	ori	r24, 0x10	; 16
     78e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	42 e0       	ldi	r20, 0x02	; 2
     798:	55 de       	rcall	.-854    	; 0x444 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     79a:	76 d2       	rcall	.+1260   	; 0xc88 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0b be       	out	0x3b, r0	; 59
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <Endpoint_Write_Control_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7c2:	28 2f       	mov	r18, r24
     7c4:	39 2f       	mov	r19, r25
     7c6:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7c8:	80 91 20 01 	lds	r24, 0x0120
     7cc:	90 91 21 01 	lds	r25, 0x0121
     7d0:	86 17       	cp	r24, r22
     7d2:	97 07       	cpc	r25, r23
     7d4:	18 f4       	brcc	.+6      	; 0x7dc <Endpoint_Write_Control_Stream_LE+0x1a>
     7d6:	bc 01       	movw	r22, r24
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	37 c0       	rjmp	.+110    	; 0x84a <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7dc:	61 15       	cp	r22, r1
     7de:	71 05       	cpc	r23, r1
     7e0:	d9 f7       	brne	.-10     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7e2:	80 91 e8 00 	lds	r24, 0x00E8
     7e6:	8e 77       	andi	r24, 0x7E	; 126
     7e8:	80 93 e8 00 	sts	0x00E8, r24
     7ec:	f5 cf       	rjmp	.-22     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ee:	80 91 19 01 	lds	r24, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7f2:	88 23       	and	r24, r24
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <Endpoint_Write_Control_Stream_LE+0x36>
     7f6:	3f c0       	rjmp	.+126    	; 0x876 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f8:	85 30       	cpi	r24, 0x05	; 5
     7fa:	c9 f1       	breq	.+114    	; 0x86e <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     800:	83 fd       	sbrc	r24, 3
     802:	37 c0       	rjmp	.+110    	; 0x872 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     804:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     808:	82 fd       	sbrc	r24, 2
     80a:	2b c0       	rjmp	.+86     	; 0x862 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     80c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     810:	80 ff       	sbrs	r24, 0
     812:	1b c0       	rjmp	.+54     	; 0x84a <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     814:	80 91 f2 00 	lds	r24, 0x00F2
     818:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     81c:	06 c0       	rjmp	.+12     	; 0x82a <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     81e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     820:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     824:	61 50       	subi	r22, 0x01	; 1
     826:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     828:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     82a:	61 15       	cp	r22, r1
     82c:	71 05       	cpc	r23, r1
     82e:	19 f0       	breq	.+6      	; 0x836 <Endpoint_Write_Control_Stream_LE+0x74>
     830:	88 30       	cpi	r24, 0x08	; 8
     832:	91 05       	cpc	r25, r1
     834:	a0 f3       	brcs	.-24     	; 0x81e <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	88 30       	cpi	r24, 0x08	; 8
     83a:	91 05       	cpc	r25, r1
     83c:	09 f0       	breq	.+2      	; 0x840 <Endpoint_Write_Control_Stream_LE+0x7e>
     83e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     840:	80 91 e8 00 	lds	r24, 0x00E8
     844:	8e 77       	andi	r24, 0x7E	; 126
     846:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     84a:	61 15       	cp	r22, r1
     84c:	71 05       	cpc	r23, r1
     84e:	79 f6       	brne	.-98     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x2c>
     850:	22 23       	and	r18, r18
     852:	69 f6       	brne	.-102    	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x2c>
     854:	06 c0       	rjmp	.+12     	; 0x862 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     856:	80 91 19 01 	lds	r24, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     85a:	88 23       	and	r24, r24
     85c:	61 f0       	breq	.+24     	; 0x876 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     85e:	85 30       	cpi	r24, 0x05	; 5
     860:	61 f0       	breq	.+24     	; 0x87a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     862:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     866:	82 ff       	sbrs	r24, 2
     868:	f6 cf       	rjmp	.-20     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     87a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     87c:	08 95       	ret

0000087e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     87e:	61 15       	cp	r22, r1
     880:	71 05       	cpc	r23, r1
     882:	31 f5       	brne	.+76     	; 0x8d0 <Endpoint_Read_Control_Stream_LE+0x52>
     884:	20 c0       	rjmp	.+64     	; 0x8c6 <Endpoint_Read_Control_Stream_LE+0x48>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     886:	20 91 19 01 	lds	r18, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     88a:	22 23       	and	r18, r18
     88c:	a9 f1       	breq	.+106    	; 0x8f8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     88e:	25 30       	cpi	r18, 0x05	; 5
     890:	79 f1       	breq	.+94     	; 0x8f0 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     892:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     896:	23 fd       	sbrc	r18, 3
     898:	2d c0       	rjmp	.+90     	; 0x8f4 <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     89a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     89e:	22 ff       	sbrs	r18, 2
     8a0:	f2 cf       	rjmp	.-28     	; 0x886 <Endpoint_Read_Control_Stream_LE+0x8>
     8a2:	e8 2f       	mov	r30, r24
     8a4:	f9 2f       	mov	r31, r25
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8a8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8ac:	81 93       	st	Z+, r24
     8ae:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     8b0:	61 50       	subi	r22, 0x01	; 1
     8b2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8b4:	41 f0       	breq	.+16     	; 0x8c6 <Endpoint_Read_Control_Stream_LE+0x48>
     8b6:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     8b8:	20 91 f2 00 	lds	r18, 0x00F2
     8bc:	30 91 f3 00 	lds	r19, 0x00F3
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	89 f7       	brne	.-30     	; 0x8a8 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8c6:	20 91 e8 00 	lds	r18, 0x00E8
     8ca:	2b 77       	andi	r18, 0x7B	; 123
     8cc:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     8d0:	61 15       	cp	r22, r1
     8d2:	71 05       	cpc	r23, r1
     8d4:	c1 f6       	brne	.-80     	; 0x886 <Endpoint_Read_Control_Stream_LE+0x8>
     8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <Endpoint_Read_Control_Stream_LE+0x66>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8d8:	80 91 19 01 	lds	r24, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8dc:	88 23       	and	r24, r24
     8de:	61 f0       	breq	.+24     	; 0x8f8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8e0:	85 30       	cpi	r24, 0x05	; 5
     8e2:	61 f0       	breq	.+24     	; 0x8fc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8e4:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     8e8:	80 ff       	sbrs	r24, 0
     8ea:	f6 cf       	rjmp	.-20     	; 0x8d8 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8fc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8fe:	08 95       	ret

00000900 <Endpoint_Write_Control_PStream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     900:	e8 2f       	mov	r30, r24
     902:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     904:	80 91 20 01 	lds	r24, 0x0120
     908:	90 91 21 01 	lds	r25, 0x0121
     90c:	86 17       	cp	r24, r22
     90e:	97 07       	cpc	r25, r23
     910:	18 f4       	brcc	.+6      	; 0x918 <Endpoint_Write_Control_PStream_LE+0x18>
     912:	bc 01       	movw	r22, r24
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	38 c0       	rjmp	.+112    	; 0x988 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     918:	61 15       	cp	r22, r1
     91a:	71 05       	cpc	r23, r1
     91c:	d9 f7       	brne	.-10     	; 0x914 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     91e:	80 91 e8 00 	lds	r24, 0x00E8
     922:	8e 77       	andi	r24, 0x7E	; 126
     924:	80 93 e8 00 	sts	0x00E8, r24
     928:	f5 cf       	rjmp	.-22     	; 0x914 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     92a:	80 91 19 01 	lds	r24, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     92e:	88 23       	and	r24, r24
     930:	09 f4       	brne	.+2      	; 0x934 <Endpoint_Write_Control_PStream_LE+0x34>
     932:	40 c0       	rjmp	.+128    	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     934:	85 30       	cpi	r24, 0x05	; 5
     936:	d1 f1       	breq	.+116    	; 0x9ac <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     938:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     93c:	83 fd       	sbrc	r24, 3
     93e:	38 c0       	rjmp	.+112    	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     940:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     944:	82 fd       	sbrc	r24, 2
     946:	2c c0       	rjmp	.+88     	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     948:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     94c:	80 ff       	sbrs	r24, 0
     94e:	1c c0       	rjmp	.+56     	; 0x988 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     950:	80 91 f2 00 	lds	r24, 0x00F2
     954:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     958:	07 c0       	rjmp	.+14     	; 0x968 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     95a:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     95c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     960:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     962:	61 50       	subi	r22, 0x01	; 1
     964:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     966:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     968:	61 15       	cp	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	19 f0       	breq	.+6      	; 0x974 <Endpoint_Write_Control_PStream_LE+0x74>
     96e:	88 30       	cpi	r24, 0x08	; 8
     970:	91 05       	cpc	r25, r1
     972:	98 f3       	brcs	.-26     	; 0x95a <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	88 30       	cpi	r24, 0x08	; 8
     978:	91 05       	cpc	r25, r1
     97a:	09 f0       	breq	.+2      	; 0x97e <Endpoint_Write_Control_PStream_LE+0x7e>
     97c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     97e:	80 91 e8 00 	lds	r24, 0x00E8
     982:	8e 77       	andi	r24, 0x7E	; 126
     984:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     988:	61 15       	cp	r22, r1
     98a:	71 05       	cpc	r23, r1
     98c:	71 f6       	brne	.-100    	; 0x92a <Endpoint_Write_Control_PStream_LE+0x2a>
     98e:	22 23       	and	r18, r18
     990:	61 f6       	brne	.-104    	; 0x92a <Endpoint_Write_Control_PStream_LE+0x2a>
     992:	06 c0       	rjmp	.+12     	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     994:	80 91 19 01 	lds	r24, 0x0119

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     998:	88 23       	and	r24, r24
     99a:	61 f0       	breq	.+24     	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     99c:	85 30       	cpi	r24, 0x05	; 5
     99e:	61 f0       	breq	.+24     	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9a4:	82 ff       	sbrs	r24, 2
     9a6:	f6 cf       	rjmp	.-20     	; 0x994 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9b8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9ba:	08 95       	ret

000009bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	ac 97       	sbiw	r28, 0x2c	; 44
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9d4:	ea e1       	ldi	r30, 0x1A	; 26
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9d8:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9dc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9de:	21 e0       	ldi	r18, 0x01	; 1
     9e0:	e2 32       	cpi	r30, 0x22	; 34
     9e2:	f2 07       	cpc	r31, r18
     9e4:	c9 f7       	brne	.-14     	; 0x9d8 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9e6:	a1 dc       	rcall	.-1726   	; 0x32a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9ec:	83 ff       	sbrs	r24, 3
     9ee:	33 c1       	rjmp	.+614    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9f0:	80 91 1a 01 	lds	r24, 0x011A

		switch (USB_ControlRequest.bRequest)
     9f4:	20 91 1b 01 	lds	r18, 0x011B
     9f8:	25 30       	cpi	r18, 0x05	; 5
     9fa:	09 f4       	brne	.+2      	; 0x9fe <USB_Device_ProcessControlRequest+0x42>
     9fc:	84 c0       	rjmp	.+264    	; 0xb06 <USB_Device_ProcessControlRequest+0x14a>
     9fe:	26 30       	cpi	r18, 0x06	; 6
     a00:	40 f4       	brcc	.+16     	; 0xa12 <USB_Device_ProcessControlRequest+0x56>
     a02:	21 30       	cpi	r18, 0x01	; 1
     a04:	a1 f1       	breq	.+104    	; 0xa6e <USB_Device_ProcessControlRequest+0xb2>
     a06:	21 30       	cpi	r18, 0x01	; 1
     a08:	70 f0       	brcs	.+28     	; 0xa26 <USB_Device_ProcessControlRequest+0x6a>
     a0a:	23 30       	cpi	r18, 0x03	; 3
     a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x54>
     a0e:	23 c1       	rjmp	.+582    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
     a10:	2e c0       	rjmp	.+92     	; 0xa6e <USB_Device_ProcessControlRequest+0xb2>
     a12:	28 30       	cpi	r18, 0x08	; 8
     a14:	09 f4       	brne	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x5c>
     a16:	f1 c0       	rjmp	.+482    	; 0xbfa <USB_Device_ProcessControlRequest+0x23e>
     a18:	29 30       	cpi	r18, 0x09	; 9
     a1a:	09 f4       	brne	.+2      	; 0xa1e <USB_Device_ProcessControlRequest+0x62>
     a1c:	00 c1       	rjmp	.+512    	; 0xc1e <USB_Device_ProcessControlRequest+0x262>
     a1e:	26 30       	cpi	r18, 0x06	; 6
     a20:	09 f0       	breq	.+2      	; 0xa24 <USB_Device_ProcessControlRequest+0x68>
     a22:	19 c1       	rjmp	.+562    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
     a24:	94 c0       	rjmp	.+296    	; 0xb4e <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a26:	80 38       	cpi	r24, 0x80	; 128
     a28:	21 f0       	breq	.+8      	; 0xa32 <USB_Device_ProcessControlRequest+0x76>
     a2a:	82 38       	cpi	r24, 0x82	; 130
     a2c:	09 f0       	breq	.+2      	; 0xa30 <USB_Device_ProcessControlRequest+0x74>
     a2e:	13 c1       	rjmp	.+550    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a32:	80 91 16 01 	lds	r24, 0x0116
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a36:	90 91 17 01 	lds	r25, 0x0117
     a3a:	99 23       	and	r25, r25
     a3c:	71 f0       	breq	.+28     	; 0xa5a <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a42:	80 91 1e 01 	lds	r24, 0x011E
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a4c:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	95 ff       	sbrs	r25, 5
     a54:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a56:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a5a:	90 91 e8 00 	lds	r25, 0x00E8
     a5e:	97 7f       	andi	r25, 0xF7	; 247
     a60:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a64:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     a68:	10 92 f1 00 	sts	0x00F1, r1
     a6c:	d1 c0       	rjmp	.+418    	; 0xc10 <USB_Device_ProcessControlRequest+0x254>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a6e:	88 23       	and	r24, r24
     a70:	19 f0       	breq	.+6      	; 0xa78 <USB_Device_ProcessControlRequest+0xbc>
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0xbc>
     a76:	ef c0       	rjmp	.+478    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	8f 71       	andi	r24, 0x1F	; 31
     a7c:	90 70       	andi	r25, 0x00	; 0
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	29 f0       	breq	.+10     	; 0xa8c <USB_Device_ProcessControlRequest+0xd0>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	91 05       	cpc	r25, r1
     a86:	09 f0       	breq	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0xce>
     a88:	e6 c0       	rjmp	.+460    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
     a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a8c:	80 91 1c 01 	lds	r24, 0x011C
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0xda>
     a94:	e0 c0       	rjmp	.+448    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a96:	23 30       	cpi	r18, 0x03	; 3
     a98:	09 f0       	breq	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0xe0>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	80 93 17 01 	sts	0x0117, r24
     aa0:	2c c0       	rjmp	.+88     	; 0xafa <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     aa2:	80 91 1c 01 	lds	r24, 0x011C
     aa6:	88 23       	and	r24, r24
     aa8:	41 f5       	brne	.+80     	; 0xafa <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aaa:	20 91 1e 01 	lds	r18, 0x011E
     aae:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ab0:	09 f4       	brne	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0xf8>
     ab2:	d1 c0       	rjmp	.+418    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ab4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ab8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     abc:	80 ff       	sbrs	r24, 0
     abe:	1d c0       	rjmp	.+58     	; 0xafa <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ac0:	80 91 1b 01 	lds	r24, 0x011B
     ac4:	83 30       	cpi	r24, 0x03	; 3
     ac6:	21 f4       	brne	.+8      	; 0xad0 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ac8:	80 91 eb 00 	lds	r24, 0x00EB
     acc:	80 62       	ori	r24, 0x20	; 32
     ace:	13 c0       	rjmp	.+38     	; 0xaf6 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ad0:	80 91 eb 00 	lds	r24, 0x00EB
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <USB_Device_ProcessControlRequest+0x128>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	2a 95       	dec	r18
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <USB_Device_ProcessControlRequest+0x124>
     ae8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     aec:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     af0:	80 91 eb 00 	lds	r24, 0x00EB
     af4:	88 60       	ori	r24, 0x08	; 8
     af6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     afa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     afe:	80 91 e8 00 	lds	r24, 0x00E8
     b02:	87 7f       	andi	r24, 0xF7	; 247
     b04:	88 c0       	rjmp	.+272    	; 0xc16 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b06:	88 23       	and	r24, r24
     b08:	09 f0       	breq	.+2      	; 0xb0c <USB_Device_ProcessControlRequest+0x150>
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     b0c:	10 91 1c 01 	lds	r17, 0x011C
     b10:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b12:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b14:	f8 94       	cli
     b16:	80 91 e8 00 	lds	r24, 0x00E8
     b1a:	87 7f       	andi	r24, 0xF7	; 247
     b1c:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b20:	0c dd       	rcall	.-1512   	; 0x53a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b22:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b26:	80 ff       	sbrs	r24, 0
     b28:	fc cf       	rjmp	.-8      	; 0xb22 <USB_Device_ProcessControlRequest+0x166>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b2a:	80 91 e3 00 	lds	r24, 0x00E3
     b2e:	80 78       	andi	r24, 0x80	; 128
     b30:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b32:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b36:	80 68       	ori	r24, 0x80	; 128
     b38:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b3c:	11 23       	and	r17, r17
     b3e:	11 f0       	breq	.+4      	; 0xb44 <USB_Device_ProcessControlRequest+0x188>
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x18a>
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	80 93 19 01 	sts	0x0119, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b4a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     b4c:	84 c0       	rjmp	.+264    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b4e:	80 58       	subi	r24, 0x80	; 128
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	08 f0       	brcs	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x19a>
     b54:	80 c0       	rjmp	.+256    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b56:	80 91 1c 01 	lds	r24, 0x011C
     b5a:	90 91 1d 01 	lds	r25, 0x011D
     b5e:	23 e0       	ldi	r18, 0x03	; 3
     b60:	8c 3d       	cpi	r24, 0xDC	; 220
     b62:	92 07       	cpc	r25, r18
     b64:	91 f5       	brne	.+100    	; 0xbca <USB_Device_ProcessControlRequest+0x20e>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b6a:	8a e2       	ldi	r24, 0x2A	; 42
     b6c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b6e:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b70:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b72:	de 01       	movw	r26, r28
     b74:	15 96       	adiw	r26, 0x05	; 5
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b7a:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b7c:	61 e2       	ldi	r22, 0x21	; 33
     b7e:	e4 2f       	mov	r30, r20
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	60 93 57 00 	sts	0x0057, r22
     b86:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     b88:	80 ff       	sbrs	r24, 0
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
     b8c:	e2 95       	swap	r30
     b8e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b90:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b92:	ef 70       	andi	r30, 0x0F	; 15
     b94:	2e 2f       	mov	r18, r30
     b96:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b98:	ea 30       	cpi	r30, 0x0A	; 10
     b9a:	18 f0       	brcs	.+6      	; 0xba2 <USB_Device_ProcessControlRequest+0x1e6>
     b9c:	29 5c       	subi	r18, 0xC9	; 201
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <USB_Device_ProcessControlRequest+0x1ea>
     ba2:	20 5d       	subi	r18, 0xD0	; 208
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	2d 93       	st	X+, r18
     ba8:	3d 93       	st	X+, r19
     baa:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bac:	84 31       	cpi	r24, 0x14	; 20
     bae:	91 05       	cpc	r25, r1
     bb0:	31 f7       	brne	.-52     	; 0xb7e <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bb2:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb4:	80 91 e8 00 	lds	r24, 0x00E8
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bbe:	ce 01       	movw	r24, r28
     bc0:	03 96       	adiw	r24, 0x03	; 3
     bc2:	6a e2       	ldi	r22, 0x2A	; 42
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	fd dd       	rcall	.-1030   	; 0x7c2 <Endpoint_Write_Control_Stream_LE>
     bc8:	12 c0       	rjmp	.+36     	; 0xbee <USB_Device_ProcessControlRequest+0x232>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bca:	60 91 1e 01 	lds	r22, 0x011E
     bce:	ae 01       	movw	r20, r28
     bd0:	4f 5f       	subi	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	0a dc       	rcall	.-2028   	; 0x3ea <CALLBACK_USB_GetDescriptor>
     bd6:	bc 01       	movw	r22, r24
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	09 f4       	brne	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x222>
     bdc:	3c c0       	rjmp	.+120    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
     bde:	80 91 e8 00 	lds	r24, 0x00E8
     be2:	87 7f       	andi	r24, 0xF7	; 247
     be4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	89 de       	rcall	.-750    	; 0x900 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bee:	80 91 e8 00 	lds	r24, 0x00E8
     bf2:	8b 77       	andi	r24, 0x7B	; 123
     bf4:	80 93 e8 00 	sts	0x00E8, r24
     bf8:	2e c0       	rjmp	.+92     	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bfa:	80 38       	cpi	r24, 0x80	; 128
     bfc:	61 f5       	brne	.+88     	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfe:	80 91 e8 00 	lds	r24, 0x00E8
     c02:	87 7f       	andi	r24, 0xF7	; 247
     c04:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c08:	80 91 15 01 	lds	r24, 0x0115
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c0c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c10:	80 91 e8 00 	lds	r24, 0x00E8
     c14:	8e 77       	andi	r24, 0x7E	; 126
     c16:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c1a:	8f dc       	rcall	.-1762   	; 0x53a <Endpoint_ClearStatusStage>
     c1c:	1c c0       	rjmp	.+56     	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c1e:	88 23       	and	r24, r24
     c20:	d1 f4       	brne	.+52     	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c22:	90 91 1c 01 	lds	r25, 0x011C
     c26:	92 30       	cpi	r25, 0x02	; 2
     c28:	b0 f4       	brcc	.+44     	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c2a:	80 91 e8 00 	lds	r24, 0x00E8
     c2e:	87 7f       	andi	r24, 0xF7	; 247
     c30:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c34:	90 93 15 01 	sts	0x0115, r25

	Endpoint_ClearStatusStage();
     c38:	80 dc       	rcall	.-1792   	; 0x53a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c3a:	80 91 15 01 	lds	r24, 0x0115
     c3e:	88 23       	and	r24, r24
     c40:	21 f4       	brne	.+8      	; 0xc4a <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c42:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c46:	87 ff       	sbrs	r24, 7
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <USB_Device_ProcessControlRequest+0x292>
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <USB_Device_ProcessControlRequest+0x294>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 19 01 	sts	0x0119, r24

	EVENT_USB_Device_ConfigurationChanged();
     c54:	61 db       	rcall	.-2366   	; 0x318 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c56:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c5a:	83 ff       	sbrs	r24, 3
     c5c:	0a c0       	rjmp	.+20     	; 0xc72 <USB_Device_ProcessControlRequest+0x2b6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c5e:	80 91 eb 00 	lds	r24, 0x00EB
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	87 7f       	andi	r24, 0xF7	; 247
     c6e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c72:	ac 96       	adiw	r28, 0x2c	; 44
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
     c88:	08 95       	ret

00000c8a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c8a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c8c:	80 91 19 01 	lds	r24, 0x0119
     c90:	88 23       	and	r24, r24
     c92:	a9 f0       	breq	.+42     	; 0xcbe <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c94:	80 91 e9 00 	lds	r24, 0x00E9
     c98:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c9a:	90 91 ec 00 	lds	r25, 0x00EC
     c9e:	90 ff       	sbrs	r25, 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <USB_USBTask+0x1c>
     ca2:	10 e8       	ldi	r17, 0x80	; 128
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <USB_USBTask+0x1e>
     ca6:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca8:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     caa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cae:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     cb2:	83 ff       	sbrs	r24, 3
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <USB_USBTask+0x2e>
		  USB_Device_ProcessControlRequest();
     cb6:	82 de       	rcall	.-764    	; 0x9bc <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cb8:	1f 70       	andi	r17, 0x0F	; 15
     cba:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     cbe:	1f 91       	pop	r17
     cc0:	08 95       	ret

00000cc2 <Audio_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     cc2:	2f 92       	push	r2
     cc4:	3f 92       	push	r3
     cc6:	4f 92       	push	r4
     cc8:	5f 92       	push	r5
     cca:	6f 92       	push	r6
     ccc:	7f 92       	push	r7
     cce:	8f 92       	push	r8
     cd0:	9f 92       	push	r9
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <Audio_Device_ProcessControlRequest+0x26>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	5c 01       	movw	r10, r24
				}
			}

			break;
	}
}
     cee:	2d b6       	in	r2, 0x3d	; 61
     cf0:	3e b6       	in	r3, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     cf6:	83 ff       	sbrs	r24, 3
     cf8:	49 c1       	rjmp	.+658    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     cfa:	20 91 1a 01 	lds	r18, 0x011A
     cfe:	82 2f       	mov	r24, r18
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	8f 71       	andi	r24, 0x1F	; 31
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	41 f4       	brne	.+16     	; 0xd1c <Audio_Device_ProcessControlRequest+0x5a>
	{
		uint8_t InterfaceIndex = (USB_ControlRequest.wIndex & 0xFF);
     d0c:	30 91 1e 01 	lds	r19, 0x011E
	
		if ((InterfaceIndex != AudioInterfaceInfo->Config.ControlInterfaceNumber) &&
     d10:	f5 01       	movw	r30, r10
     d12:	40 81       	ld	r20, Z
     d14:	34 17       	cp	r19, r20
     d16:	79 f0       	breq	.+30     	; 0xd36 <Audio_Device_ProcessControlRequest+0x74>
     d18:	41 81       	ldd	r20, Z+1	; 0x01
     d1a:	0a c0       	rjmp	.+20     	; 0xd30 <Audio_Device_ProcessControlRequest+0x6e>
		    (InterfaceIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber))
		{
			return;
		}
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	91 05       	cpc	r25, r1
     d20:	51 f4       	brne	.+20     	; 0xd36 <Audio_Device_ProcessControlRequest+0x74>
	{
		uint8_t EndpointAddress = (USB_ControlRequest.wIndex & 0xFF);
     d22:	30 91 1e 01 	lds	r19, 0x011E
	
		if ((EndpointAddress != AudioInterfaceInfo->Config.DataINEndpoint.Address) &&
     d26:	f5 01       	movw	r30, r10
     d28:	42 81       	ldd	r20, Z+2	; 0x02
     d2a:	34 17       	cp	r19, r20
     d2c:	21 f0       	breq	.+8      	; 0xd36 <Audio_Device_ProcessControlRequest+0x74>
     d2e:	47 81       	ldd	r20, Z+7	; 0x07
     d30:	34 17       	cp	r19, r20
     d32:	09 f0       	breq	.+2      	; 0xd36 <Audio_Device_ProcessControlRequest+0x74>
     d34:	2b c1       	rjmp	.+598    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
     d36:	d0 90 1b 01 	lds	r13, 0x011B
     d3a:	fd 2d       	mov	r31, r13
     d3c:	fb 30       	cpi	r31, 0x0B	; 11
     d3e:	99 f0       	breq	.+38     	; 0xd66 <Audio_Device_ProcessControlRequest+0xa4>
     d40:	fc 30       	cpi	r31, 0x0C	; 12
     d42:	30 f4       	brcc	.+12     	; 0xd50 <Audio_Device_ProcessControlRequest+0x8e>
     d44:	2d 2d       	mov	r18, r13
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	24 30       	cpi	r18, 0x04	; 4
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <Audio_Device_ProcessControlRequest+0x8c>
     d4c:	1f c1       	rjmp	.+574    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     d4e:	2a c0       	rjmp	.+84     	; 0xda4 <Audio_Device_ProcessControlRequest+0xe2>
     d50:	3d 2d       	mov	r19, r13
     d52:	31 38       	cpi	r19, 0x81	; 129
     d54:	08 f4       	brcc	.+2      	; 0xd58 <Audio_Device_ProcessControlRequest+0x96>
     d56:	1a c1       	rjmp	.+564    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     d58:	35 38       	cpi	r19, 0x85	; 133
     d5a:	08 f4       	brcc	.+2      	; 0xd5e <Audio_Device_ProcessControlRequest+0x9c>
     d5c:	b0 c0       	rjmp	.+352    	; 0xebe <Audio_Device_ProcessControlRequest+0x1fc>
     d5e:	3f 3f       	cpi	r19, 0xFF	; 255
     d60:	09 f0       	breq	.+2      	; 0xd64 <Audio_Device_ProcessControlRequest+0xa2>
     d62:	14 c1       	rjmp	.+552    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <Audio_Device_ProcessControlRequest+0xcc>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <Audio_Device_ProcessControlRequest+0xaa>
     d6a:	10 c1       	rjmp	.+544    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d6c:	80 91 e8 00 	lds	r24, 0x00E8
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     d76:	e1 db       	rcall	.-2110   	; 0x53a <Endpoint_ClearStatusStage>

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
     d78:	90 91 1c 01 	lds	r25, 0x011C
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	99 23       	and	r25, r25
     d80:	09 f4       	brne	.+2      	; 0xd84 <Audio_Device_ProcessControlRequest+0xc2>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	f5 01       	movw	r30, r10
     d86:	84 87       	std	Z+12, r24	; 0x0c
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
     d88:	c5 01       	movw	r24, r10
     d8a:	30 d1       	rcall	.+608    	; 0xfec <Audio_Device_Event_Stub>
     d8c:	ff c0       	rjmp	.+510    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     d8e:	21 52       	subi	r18, 0x21	; 33
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	08 f0       	brcs	.+2      	; 0xd96 <Audio_Device_ProcessControlRequest+0xd4>
     d94:	fb c0       	rjmp	.+502    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     d96:	80 91 e8 00 	lds	r24, 0x00E8
     d9a:	87 7f       	andi	r24, 0xF7	; 247
     d9c:	80 93 e8 00 	sts	0x00E8, r24
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     da0:	cc db       	rcall	.-2152   	; 0x53a <Endpoint_ClearStatusStage>
     da2:	f4 c0       	rjmp	.+488    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	91 05       	cpc	r25, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <Audio_Device_ProcessControlRequest+0xea>
     daa:	42 c0       	rjmp	.+132    	; 0xe30 <Audio_Device_ProcessControlRequest+0x16e>
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     dac:	c0 90 1e 01 	lds	r12, 0x011E
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
     db0:	80 90 1d 01 	lds	r8, 0x011D

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     db4:	c5 01       	movw	r24, r10
     db6:	6d 2d       	mov	r22, r13
     db8:	4c 2d       	mov	r20, r12
     dba:	28 2d       	mov	r18, r8
     dbc:	00 e0       	ldi	r16, 0x00	; 0
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	b5 da       	rcall	.-2710   	; 0x330 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     dc6:	88 23       	and	r24, r24
     dc8:	09 f4       	brne	.+2      	; 0xdcc <Audio_Device_ProcessControlRequest+0x10a>
     dca:	e0 c0       	rjmp	.+448    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     dcc:	ed b6       	in	r14, 0x3d	; 61
     dce:	fe b6       	in	r15, 0x3e	; 62
     dd0:	9d b6       	in	r9, 0x3d	; 61
     dd2:	5f 2c       	mov	r5, r15
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     dd4:	80 91 20 01 	lds	r24, 0x0120
     dd8:	90 91 21 01 	lds	r25, 0x0121
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
					uint8_t  Value[ValueLength];
     de0:	2d b7       	in	r18, 0x3d	; 61
     de2:	3e b7       	in	r19, 0x3e	; 62
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	3e bf       	out	0x3e, r19	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	2d bf       	out	0x3d, r18	; 61
     df2:	6d b6       	in	r6, 0x3d	; 61
     df4:	7e b6       	in	r7, 0x3e	; 62
     df6:	08 94       	sec
     df8:	61 1c       	adc	r6, r1
     dfa:	71 1c       	adc	r7, r1
     dfc:	80 91 e8 00 	lds	r24, 0x00E8
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	80 93 e8 00 	sts	0x00E8, r24

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     e06:	69 81       	ldd	r22, Y+1	; 0x01
     e08:	7a 81       	ldd	r23, Y+2	; 0x02
     e0a:	c3 01       	movw	r24, r6
     e0c:	38 dd       	rcall	.-1424   	; 0x87e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e0e:	80 91 e8 00 	lds	r24, 0x00E8
     e12:	8e 77       	andi	r24, 0x7E	; 126
     e14:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     e18:	c5 01       	movw	r24, r10
     e1a:	6d 2d       	mov	r22, r13
     e1c:	4c 2d       	mov	r20, r12
     e1e:	28 2d       	mov	r18, r8
     e20:	8e 01       	movw	r16, r28
     e22:	0f 5f       	subi	r16, 0xFF	; 255
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	73 01       	movw	r14, r6
     e28:	83 da       	rcall	.-2810   	; 0x330 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e2a:	39 2d       	mov	r19, r9
     e2c:	25 2d       	mov	r18, r5
     e2e:	a7 c0       	rjmp	.+334    	; 0xf7e <Audio_Device_ProcessControlRequest+0x2bc>
					                                             EndpointControl, &ValueLength, Value);
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	91 05       	cpc	r25, r1
     e34:	09 f0       	breq	.+2      	; 0xe38 <Audio_Device_ProcessControlRequest+0x176>
     e36:	aa c0       	rjmp	.+340    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
     e38:	c0 90 1f 01 	lds	r12, 0x011F
				uint16_t Parameter = USB_ControlRequest.wValue;
     e3c:	80 90 1c 01 	lds	r8, 0x011C
     e40:	90 90 1d 01 	lds	r9, 0x011D

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     e44:	c5 01       	movw	r24, r10
     e46:	6d 2d       	mov	r22, r13
     e48:	4c 2d       	mov	r20, r12
     e4a:	94 01       	movw	r18, r8
     e4c:	00 e0       	ldi	r16, 0x00	; 0
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	ee 24       	eor	r14, r14
     e52:	ff 24       	eor	r15, r15
     e54:	c8 da       	rcall	.-2672   	; 0x3e6 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <Audio_Device_ProcessControlRequest+0x19a>
     e5a:	98 c0       	rjmp	.+304    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     e5c:	6d b7       	in	r22, 0x3d	; 61
     e5e:	7e b7       	in	r23, 0x3e	; 62
     e60:	5d b6       	in	r5, 0x3d	; 61
     e62:	47 2e       	mov	r4, r23
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     e64:	80 91 20 01 	lds	r24, 0x0120
     e68:	90 91 21 01 	lds	r25, 0x0121
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
					uint8_t  Value[ValueLength];
     e70:	2d b7       	in	r18, 0x3d	; 61
     e72:	3e b7       	in	r19, 0x3e	; 62
     e74:	28 1b       	sub	r18, r24
     e76:	39 0b       	sbc	r19, r25
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	3e bf       	out	0x3e, r19	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	2d bf       	out	0x3d, r18	; 61
     e82:	6d b6       	in	r6, 0x3d	; 61
     e84:	7e b6       	in	r7, 0x3e	; 62
     e86:	08 94       	sec
     e88:	61 1c       	adc	r6, r1
     e8a:	71 1c       	adc	r7, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	80 93 e8 00 	sts	0x00E8, r24

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     e96:	69 81       	ldd	r22, Y+1	; 0x01
     e98:	7a 81       	ldd	r23, Y+2	; 0x02
     e9a:	c3 01       	movw	r24, r6
     e9c:	f0 dc       	rcall	.-1568   	; 0x87e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e9e:	80 91 e8 00 	lds	r24, 0x00E8
     ea2:	8e 77       	andi	r24, 0x7E	; 126
     ea4:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     ea8:	c5 01       	movw	r24, r10
     eaa:	6d 2d       	mov	r22, r13
     eac:	4c 2d       	mov	r20, r12
     eae:	94 01       	movw	r18, r8
     eb0:	8e 01       	movw	r16, r28
     eb2:	0f 5f       	subi	r16, 0xFF	; 255
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	73 01       	movw	r14, r6
     eb8:	96 da       	rcall	.-2772   	; 0x3e6 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     eba:	92 01       	movw	r18, r4
     ebc:	60 c0       	rjmp	.+192    	; 0xf7e <Audio_Device_ProcessControlRequest+0x2bc>
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	91 05       	cpc	r25, r1
     ec2:	11 f5       	brne	.+68     	; 0xf08 <Audio_Device_ProcessControlRequest+0x246>
     ec4:	6d b7       	in	r22, 0x3d	; 61
     ec6:	7e b7       	in	r23, 0x3e	; 62
     ec8:	cd b6       	in	r12, 0x3d	; 61
     eca:	67 2e       	mov	r6, r23
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     ecc:	40 91 1e 01 	lds	r20, 0x011E
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
     ed0:	20 91 1d 01 	lds	r18, 0x011D
				uint16_t ValueLength      = USB_ControlRequest.wLength;
     ed4:	80 91 20 01 	lds	r24, 0x0120
     ed8:	90 91 21 01 	lds	r25, 0x0121
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  Value[ValueLength];
     ee0:	68 1b       	sub	r22, r24
     ee2:	79 0b       	sbc	r23, r25
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	7e bf       	out	0x3e, r23	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	6d bf       	out	0x3d, r22	; 61
     eee:	8d b6       	in	r8, 0x3d	; 61
     ef0:	9e b6       	in	r9, 0x3e	; 62
     ef2:	08 94       	sec
     ef4:	81 1c       	adc	r8, r1
     ef6:	91 1c       	adc	r9, r1

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     ef8:	c5 01       	movw	r24, r10
     efa:	6d 2d       	mov	r22, r13
     efc:	8e 01       	movw	r16, r28
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	74 01       	movw	r14, r8
     f04:	15 da       	rcall	.-3030   	; 0x330 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     f06:	29 c0       	rjmp	.+82     	; 0xf5a <Audio_Device_ProcessControlRequest+0x298>
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearOUT();
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <Audio_Device_ProcessControlRequest+0x24e>
     f0e:	3e c0       	rjmp	.+124    	; 0xf8c <Audio_Device_ProcessControlRequest+0x2ca>
     f10:	8d b7       	in	r24, 0x3d	; 61
     f12:	9e b7       	in	r25, 0x3e	; 62
     f14:	cd b6       	in	r12, 0x3d	; 61
     f16:	69 2e       	mov	r6, r25
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
     f18:	40 91 1f 01 	lds	r20, 0x011F
				uint16_t Parameter   = USB_ControlRequest.wValue;
     f1c:	20 91 1c 01 	lds	r18, 0x011C
     f20:	30 91 1d 01 	lds	r19, 0x011D
				uint16_t ValueLength = USB_ControlRequest.wLength;
     f24:	80 91 20 01 	lds	r24, 0x0120
     f28:	90 91 21 01 	lds	r25, 0x0121
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  Value[ValueLength];
     f30:	6d b7       	in	r22, 0x3d	; 61
     f32:	7e b7       	in	r23, 0x3e	; 62
     f34:	68 1b       	sub	r22, r24
     f36:	79 0b       	sbc	r23, r25
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	7e bf       	out	0x3e, r23	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	6d bf       	out	0x3d, r22	; 61
     f42:	8d b6       	in	r8, 0x3d	; 61
     f44:	9e b6       	in	r9, 0x3e	; 62
     f46:	08 94       	sec
     f48:	81 1c       	adc	r8, r1
     f4a:	91 1c       	adc	r9, r1

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     f4c:	c5 01       	movw	r24, r10
     f4e:	6d 2d       	mov	r22, r13
     f50:	8e 01       	movw	r16, r28
     f52:	0f 5f       	subi	r16, 0xFF	; 255
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	74 01       	movw	r14, r8
     f58:	46 da       	rcall	.-2932   	; 0x3e6 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     f5a:	88 23       	and	r24, r24
     f5c:	71 f0       	breq	.+28     	; 0xf7a <Audio_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
     f62:	87 7f       	andi	r24, 0xF7	; 247
     f64:	80 93 e8 00 	sts	0x00E8, r24
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     f68:	69 81       	ldd	r22, Y+1	; 0x01
     f6a:	7a 81       	ldd	r23, Y+2	; 0x02
     f6c:	c4 01       	movw	r24, r8
     f6e:	29 dc       	rcall	.-1966   	; 0x7c2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	8b 77       	andi	r24, 0x7B	; 123
     f76:	80 93 e8 00 	sts	0x00E8, r24
     f7a:	3c 2d       	mov	r19, r12
     f7c:	26 2d       	mov	r18, r6
     f7e:	83 2f       	mov	r24, r19
     f80:	92 2f       	mov	r25, r18
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	9e bf       	out	0x3e, r25	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	8d bf       	out	0x3d, r24	; 61
				}
			}

			break;
	}
}
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	3e be       	out	0x3e, r3	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	2d be       	out	0x3d, r2	; 61
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	7f 90       	pop	r7
     fb4:	6f 90       	pop	r6
     fb6:	5f 90       	pop	r5
     fb8:	4f 90       	pop	r4
     fba:	3f 90       	pop	r3
     fbc:	2f 90       	pop	r2
     fbe:	08 95       	ret

00000fc0 <Audio_Device_ConfigureEndpoints>:

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
     fc6:	1c 86       	std	Y+12, r1	; 0x0c
	
	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8d 83       	std	Y+5, r24	; 0x05
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;
     fcc:	8a 87       	std	Y+10, r24	; 0x0a

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
     fce:	ce 01       	movw	r24, r28
     fd0:	02 96       	adiw	r24, 0x02	; 2
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	6e da       	rcall	.-2852   	; 0x4b2 <Endpoint_ConfigureEndpointTable>
     fd6:	88 23       	and	r24, r24
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <Audio_Device_ConfigureEndpoints+0x24>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fda:	ce 01       	movw	r24, r28
     fdc:	07 96       	adiw	r24, 0x07	; 7
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	68 da       	rcall	.-2864   	; 0x4b2 <Endpoint_ConfigureEndpointTable>
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <Audio_Device_ConfigureEndpoints+0x26>
	
	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
     fe4:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <Audio_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void Audio_Device_Event_Stub(void)
{

}
     fec:	08 95       	ret

00000fee <__udivmodsi4>:
     fee:	a1 e2       	ldi	r26, 0x21	; 33
     ff0:	1a 2e       	mov	r1, r26
     ff2:	aa 1b       	sub	r26, r26
     ff4:	bb 1b       	sub	r27, r27
     ff6:	fd 01       	movw	r30, r26
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <__udivmodsi4_ep>

00000ffa <__udivmodsi4_loop>:
     ffa:	aa 1f       	adc	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	ee 1f       	adc	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	a2 17       	cp	r26, r18
    1004:	b3 07       	cpc	r27, r19
    1006:	e4 07       	cpc	r30, r20
    1008:	f5 07       	cpc	r31, r21
    100a:	20 f0       	brcs	.+8      	; 0x1014 <__udivmodsi4_ep>
    100c:	a2 1b       	sub	r26, r18
    100e:	b3 0b       	sbc	r27, r19
    1010:	e4 0b       	sbc	r30, r20
    1012:	f5 0b       	sbc	r31, r21

00001014 <__udivmodsi4_ep>:
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	1a 94       	dec	r1
    101e:	69 f7       	brne	.-38     	; 0xffa <__udivmodsi4_loop>
    1020:	60 95       	com	r22
    1022:	70 95       	com	r23
    1024:	80 95       	com	r24
    1026:	90 95       	com	r25
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	bd 01       	movw	r22, r26
    102e:	cf 01       	movw	r24, r30
    1030:	08 95       	ret

00001032 <_exit>:
    1032:	f8 94       	cli

00001034 <__stop_program>:
    1034:	ff cf       	rjmp	.-2      	; 0x1034 <__stop_program>
